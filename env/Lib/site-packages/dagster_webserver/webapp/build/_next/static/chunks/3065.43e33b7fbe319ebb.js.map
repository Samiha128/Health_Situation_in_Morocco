{"version":3,"file":"static/chunks/3065.43e33b7fbe319ebb.js","mappings":"maA6BO,IAAMA,EAAoB,OAAC,CAACC,MAAAA,CAAK,CAAQ,CAAAC,EACxCC,EAAYC,CAAAA,EAAAA,EAAAA,MAAAA,EAA8B,MAC1CC,EAAUC,CAAAA,EAAAA,EAAAA,OAAAA,EACd,IAAML,EAAMM,GAAG,CAAC,OAAC,CAACC,YAAAA,CAAW,CAAC,CAAAN,QAAKO,CAAAA,EAAAA,EAAAA,EAAAA,EAAyBD,KAC5D,CAACP,EAAM,EAGH,CAACS,aAAAA,CAAY,CAAEC,SAAAA,CAAQ,CAAEC,YAAAA,CAAW,CAAC,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,EAC5CC,EAAAA,CAAsBA,CACtBT,GAGIU,EAAuBT,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,KACnC,IAAMU,EAAkB,EAAE,CAU1B,OATAf,EAAMgB,OAAO,CAAC,OAAC,CAACT,YAAAA,CAAW,CAAEU,KAAAA,CAAI,CAAC,CAAAhB,EAChCc,EAAKG,IAAI,CAAC,CAACC,KAAM,SAAUZ,YAAAA,EAAaa,SAAUH,EAAKI,MAAM,GAC7D,IAAMC,EAAUd,CAAAA,EAAAA,EAAAA,EAAAA,EAAyBD,GACrCE,EAAac,QAAQ,CAACD,IACxBL,EAAKD,OAAO,CAAC,OAAC,CAACQ,MAAAA,CAAK,CAAEC,KAAAA,CAAI,CAAC,CAAAxB,EACzBc,EAAKG,IAAI,CAAC,CAACC,KAAM,MAAOZ,YAAAA,EAAaiB,MAAAA,EAAOC,KAAAA,CAAI,EAClD,EAEJ,GACOV,CACT,EAAG,CAACf,EAAOS,EAAa,EAElBiB,EAAqBC,CAAAA,EAAAA,EAAAA,CAAAA,EAAuB3B,EAAMM,GAAG,CAAC,OAAC,CAACC,YAAAA,CAAW,CAAC,CAAAN,SAAKM,EAAYkB,IAAI,IAEzFG,EAAiBC,CAAAA,EAAAA,EAAAA,EAAAA,EAAe,CACpCC,MAAOhB,EAAUO,MAAM,CACvBU,iBAAkB,IAAM7B,EAAU8B,OAAO,CACzCC,aAAc,IACZ,IAAMC,EAAMpB,CAAS,CAACqB,EAAG,CACzB,MAAOD,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAKf,IAAI,IAAK,SAAWiB,EAAAA,EAAmBA,CAAG,EACxD,EACAC,SAAU,EACZ,GAEMC,EAAcV,EAAeW,YAAY,GACzCC,EAAQZ,EAAea,eAAe,GAE5C,MACE,GAAAC,EAAAC,GAAA,EAACC,MAAAA,CAAIC,MAAO,CAACC,SAAU,QAAQ,WAC7B,GAAAJ,EAAAK,IAAA,EAACC,EAAAA,EAASA,CAAAA,CAACC,IAAK/C,YACd,GAAAwC,EAAAC,GAAA,EAACO,EAAAA,CAAoBA,CAAAA,CAAAA,GACrB,GAAAR,EAAAC,GAAA,EAACQ,EAAAA,EAAKA,CAAAA,CAACC,aAAcd,WAClBE,EAAMlC,GAAG,CAAC,OAAC,CAAC+C,MAAAA,CAAK,CAAEC,IAAAA,CAAG,CAAEC,KAAAA,CAAI,CAAEC,MAAAA,CAAK,CAAC,CAAAvD,EAC7BiC,EAAepB,CAAS,CAACuC,EAAM,CAErC,MAAOlC,WADMe,EAAKf,IAAI,CAEpB,GAAAuB,EAAAC,GAAA,EAACc,EAAAA,EAAOA,CAAAA,CACNlD,YAAa2B,EAAI3B,WAAW,CAE5BmD,OAAQH,EACRC,MAAOA,EACP9C,SAAUA,EACVC,YAAaA,EACbgD,SAAUlD,EAAac,QAAQ,CAACf,CAAAA,EAAAA,EAAAA,EAAAA,EAAyB0B,EAAI3B,WAAW,GACxEqD,aAAclC,EAAmBmC,GAAG,CAAC3B,EAAI3B,WAAW,CAACkB,IAAI,EACzDqC,aACE,GAAApB,EAAAC,GAAA,EAACoB,EAAAA,CAAOA,CAAAA,CACNC,QAAS9B,IAAAA,EAAId,QAAQ,CAAS,QAAU,GAAgB6C,MAAA,CAAb/B,EAAId,QAAQ,CAAC,SACxD8C,UAAU,eAEV,GAAAxB,EAAAC,GAAA,EAACwB,EAAAA,CAAGA,CAAAA,UAAEjC,EAAId,QAAQ,MAZjBkC,GAiBP,GAAAZ,EAAAC,GAAA,EAACyB,EAAAA,CAAiBA,CAAAA,CAEhB3C,KAAMS,EAAIT,IAAI,CACdD,MAAOU,EAAIV,KAAK,CAChBjB,YAAa2B,EAAI3B,WAAW,CAC5BmD,OAAQH,EACRC,MAAOA,GALFF,EAQX,SAKV,ktBChFO,IAAMe,EAAkB,KAC7B,GAAM,CACJC,SAAAA,CAAQ,CACRC,aAAAA,CAAY,CACZC,QAASC,CAAgB,CACzBC,KAAMC,CAAU,CACjB,CAAGC,CAAAA,EAAAA,EAAAA,UAAAA,EAAWC,EAAAA,EAAgBA,EACzB,CAACC,EAAaC,EAAe,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,EAA+B,CACnEC,SAAU,SACVC,SAAU,CAACC,OAAQ,EAAE,CACvB,GAEMC,EAAYd,EAASjD,MAAM,CAE3BgE,EAAsBC,CAAAA,EAAAA,EAAAA,CAAAA,EAC1BC,EACA,CACEC,YAAa,eACbC,4BAA6B,EAC/B,GAEI,CAACf,KAAAA,CAAI,CAAEF,QAASkB,CAAY,CAAC,CAAGL,EAEhCM,EAAeC,CAAAA,EAAAA,EAAAA,EAAAA,EAA0BP,EAAqBQ,EAAAA,EAAeA,EAG7EC,EAAczF,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,KAC1B,IAAM0F,EAAgBC,OAAOC,MAAM,CAACtB,GAAYuB,MAAM,CACpD,GACEC,2BAAAA,EAASC,UAAU,EAEjBC,EAAmB3B,MAAAA,EAAAA,KAAAA,EAAAA,EAAM2B,gBAAgB,CACzCC,EACJD,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAkBD,UAAU,IAAK,YAC7BC,EAAiBE,eAAe,CAChCR,EACAS,EAAcC,CAAAA,EAAAA,EAAAA,CAAAA,EAAgBlC,GACpC,OAAOmC,EAAaJ,GAASJ,MAAM,CAAC,OAAC,CAAC3F,YAAAA,CAAW,CAAC,CAAAN,SAChDuG,EAAY3C,GAAG,CAACrD,CAAAA,EAAAA,EAAAA,EAAAA,EAAyBD,KAE7C,EAAG,CAACoE,EAAYD,EAAMH,EAAa,EAE7BC,EAAU,CAACE,GAAQD,EAEzBkC,CAAAA,EAAAA,EAAAA,EAAAA,EAAuB,eAAgB,CAACnC,GAExC,IAAMoC,EAAkB9B,EAAY+B,IAAI,GAAGC,iBAAiB,GACtDC,EAAYH,EAAgBvF,MAAM,CAAG,EAErC2F,EAAmB3G,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,KAC/B,IAAM4G,EAAgBL,EAAgBE,iBAAiB,GACvD,OAAOhB,EACJxF,GAAG,CAAC,OAAC,CAACC,YAAAA,CAAW,CAAEU,KAAAA,CAAI,CAAC,CAAAhB,QAAM,CAC7BM,YAAAA,EACAU,KAAMA,EAAKiF,MAAM,CAAC,OAAC,CAACzE,KAAAA,CAAI,CAAC,CAAAxB,SAAKwB,EAAKqF,iBAAiB,GAAGvF,QAAQ,CAAC0F,IAClE,IACCf,MAAM,CAAC,OAAC,CAACjF,KAAAA,CAAI,CAAC,CAAAhB,SAAKgB,EAAKI,MAAM,CAAG,GACtC,EAAG,CAACyE,EAAac,EAAgB,EA0D3BM,EAAoBxB,GAAgB,CAAChB,EAE3C,MACE,GAAAhC,EAAAK,IAAA,EAAAL,EAAAyE,QAAA,YACE,GAAAzE,EAAAK,IAAA,EAACqE,EAAAA,CAAGA,CAAAA,CACFC,QAAS,CAACC,WAAY,GAAIC,SAAU,EAAE,EACtCC,KAAM,CAACC,UAAW,MAAOC,WAAY,SAAUC,eAAgB,gBAAiBC,KAAM,CAAC,YAEvF,GAAAlF,EAAAK,IAAA,EAACqE,EAAAA,CAAGA,CAAAA,CAACI,KAAM,CAACC,UAAW,MAAOI,IAAK,GAAIH,WAAY,QAAQ,YACxDtC,EAAY,EAAI,GAAA1C,EAAAC,GAAA,EAACmF,EAAAA,CAAgBA,CAAAA,CAAAA,GAAM,KACxC,GAAApF,EAAAC,GAAA,EAACoF,EAAAA,EAASA,CAAAA,CACRC,KAAK,SACLC,MAAOnD,EACPhB,aACEoD,EAAoB,GAAAxE,EAAAC,GAAA,EAACuF,EAAAA,CAAkBA,CAAAA,CAACC,eAAe,kBAAqBC,KAAAA,EAE9EC,SAAU,GAAOtD,EAAeuD,EAAEC,MAAM,CAACN,KAAK,EAC9CO,YAAY,sBACZ3F,MAAO,CAAC4F,MAAO,OAAO,OAG1B,GAAA/F,EAAAC,GAAA,EAAC+F,EAAAA,EAAqBA,CAAAA,CAAC/C,aAAcA,OAEtCnB,GAAW,CAACY,EACX,GAAA1C,EAAAC,GAAA,EAACyE,EAAAA,CAAGA,CAAAA,CAACC,QAAS,YACZ,GAAA3E,EAAAC,GAAA,EAACgG,EAAAA,CAAeA,CAAAA,CAACC,MAAM,oBAGzB5E,CApFU,KACd,GAAIQ,EACF,MACE,GAAA9B,EAAAC,GAAA,EAACyE,EAAAA,CAAGA,CAAAA,CAACI,KAAM,CAACC,UAAW,MAAOE,eAAgB,QAAQ,EAAG9E,MAAO,CAACgG,WAAY,OAAO,WAClF,GAAAnG,EAAAK,IAAA,EAACqE,EAAAA,CAAGA,CAAAA,CAACI,KAAM,CAACC,UAAW,MAAOC,WAAY,SAAUG,IAAK,EAAE,YACzD,GAAAnF,EAAAC,GAAA,EAACmG,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,cACjB,GAAArG,EAAAC,GAAA,EAACC,MAAAA,CAAIC,MAAO,CAACmG,MAAOC,EAAAA,CAAgB,EAAE,WAAG,uBAMjD,IAAMC,EAAiB5E,EAASjD,MAAM,CAAGkD,EAAalD,MAAM,QAE5D,EAAsBA,MAAM,CAuCrB,GAAAqB,EAAAC,GAAA,EAAC5C,EAAiBA,CAACC,MAAOgH,IAtC/B,EAEI,GAAAtE,EAAAC,GAAA,EAACyE,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAAC8B,IAAK,EAAE,WACpB,GAAAzG,EAAAC,GAAA,EAACyG,EAAAA,CAAaA,CAAAA,CACZpB,KAAK,SACLqB,MAAM,mBACNC,YACEJ,EACE,GAAAxG,EAAAK,IAAA,EAACH,MAAAA,WAAI,oBACc,GAAAF,EAAAC,GAAA,EAAC4G,SAAAA,UAAQzE,IAAqB,gDAIjD,GAAApC,EAAAK,IAAA,EAACH,MAAAA,WAAI,oBACc,GAAAF,EAAAC,GAAA,EAAC4G,SAAAA,UAAQzE,IAAqB,yCAU3D,GAAApC,EAAAC,GAAA,EAACyE,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAAC8B,IAAK,EAAE,WACpB,GAAAzG,EAAAC,GAAA,EAACyG,EAAAA,CAAaA,CAAAA,CACZpB,KAAK,SACLqB,MAAM,UACNC,YACEJ,EACI,oDACA,4CAQhB,OAkCF,EAUMxC,EAAe,IAKnB,IAAMJ,EAAUC,EAAgBjG,GAAG,CAAC,GAAWkJ,EAAMC,mBAAmB,EAClEC,EAAU,EAAE,CAElB,IAAK,IAAMF,KAASlD,EAClB,GAAIkD,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAOpD,UAAU,IAAK,qBAI1B,IAAK,IAAMuD,KAAQH,EAAMI,YAAY,CAAE,CACrC,GAAM,CAACnI,KAAAA,CAAI,CAAEoI,UAAAA,CAAS,CAAC,CAAGF,EACpBpJ,EAAcuJ,CAAAA,EAAAA,EAAAA,EAAAA,EAAiBrI,EAAM+H,EAAM/H,IAAI,EAC/CR,EAAO4I,EACV3D,MAAM,CAAC,OAAC,CAACzE,KAAAA,CAAI,CAAC,CAAAxB,QAAK,CAAC8J,CAAAA,EAAAA,EAAAA,EAAAA,EAAsBtI,KAC1CnB,GAAG,CAAC,GACI,EACLkB,MAAOwI,EAASxI,KAAK,CACrBC,KAAMuI,EAASvI,IAAI,CACrB,EAGAR,CAAAA,EAAKI,MAAM,CAAG,GAChBqI,EAAQxI,IAAI,CAAC,CACXX,YAAAA,EACAU,KAAAA,CACF,EAEJ,CAGF,MAAOgJ,CAAAA,EAAAA,EAAAA,CAAAA,EAAgBP,EACzB,EAEMnE,EAAsB2E,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,IA6B3BC,EAAAA,CAAqBA,6tBCpOlB,IAAMC,EAAU,IACrB,GAAM,CAACC,IAAAA,CAAG,CAAEC,WAAAA,CAAU,CAAE/J,YAAAA,CAAW,CAAC,CAAGgK,EACjCC,EAAUH,EAAII,IAAI,CAACpJ,MAAM,CAAGgJ,EAAII,IAAI,CAAC,EAAE,CAAG,KAC1CC,EAAmB,CACvBC,aAAcN,EAAI5I,IAAI,CACtBmJ,eAAgBrK,EAAYkB,IAAI,CAChCoJ,uBAAwBtK,EAAY4F,QAAQ,EAGxC2E,EAAcC,CAAAA,EAAAA,EAAAA,EAAAA,EAAyBV,EAAI5I,IAAI,EAC/CuJ,EAAcC,CAAAA,EAAAA,EAAAA,CAAAA,IAEd,CACJC,YAAa,CAACC,6BAAAA,CAA4B,CAAEC,2BAAAA,CAA0B,CAAC,CACvEC,gBAAAA,CAAe,CAChB,CAAGC,CAAAA,EAAAA,EAAAA,EAAAA,EAA0B/K,EAAY4F,QAAQ,EAE5C,CAACoF,EAAuBC,EAAY,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,EAG3CC,GAEI,CAAChH,KAAAA,CAAI,CAAC,CAAG8G,EACfG,CAAAA,EAAAA,EAAAA,EAAAA,EAA2BH,EAAa,uBAExC,IAAMI,EAAkBC,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,KAC9BrB,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAASsB,EAAE,GACbP,EAAsB,CAACQ,UAAW,CAACC,MAAOxB,EAAQsB,EAAE,CAAC,EAEzD,EAAG,CAACtB,EAASe,EAAsB,EAE7BU,EAAMvH,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAMwH,kBAAkB,CAAC9F,UAAU,IAAK,MAAQ1B,MAAAA,EAAAA,KAAAA,EAAAA,EAAMwH,kBAAkB,CAAG,KACjFC,EACJ7B,YAAAA,EACE,GAAA5H,EAAAC,GAAA,EAACyJ,EAAAA,EAAQA,CAAAA,CAACpE,KAAK,UAAUqE,KAAK,aAAaC,SAAU,KACnDhC,CAAe,IAAfA,EACF,GAAA5H,EAAAC,GAAA,EAACyJ,EAAAA,EAAQA,CAAAA,CACPpE,KAAM8C,EAAYtG,OAAO,CAAG,GAAA9B,EAAAC,GAAA,EAACmG,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,iBAAoB,UACjEsD,KAAK,iBACLC,SAAU,CAAClB,EACXmB,QAAS,GAAOzB,EAAYyB,OAAO,CAAC7B,EAAkBpC,KAGxD,GAAA5F,EAAAC,GAAA,EAAC6J,EAAAA,CAAQA,CAAAA,CACPxE,KAAK,UACLqE,KAAK,iBACLC,SAAU,CAAClB,EACXqB,GAAIC,CAAAA,EAAAA,EAAAA,EAAAA,EAAsB,CACxBC,SAAUpM,EAAYkB,IAAI,CAC1BmL,aAAcrM,EAAY4F,QAAQ,CAClCwE,aAAcN,EAAI5I,IAAI,CACtBD,MAAO6I,EAAI7I,KAAK,CAChBqL,KAAM,aACR,KAIAC,EACJ,GAAApK,EAAAC,GAAA,EAACyJ,EAAAA,EAAQA,CAAAA,CACPpE,KAAK,SACLqE,KAAK,wBACLE,QAAS,IAAON,EAAMjB,EAAYiB,EAAKc,EAAAA,GAAmBA,CAACC,SAAS,EAAI5E,KAAAA,EACxEkE,SAAU,CAACnB,GAAgC,CAACc,GAAO,CAACgB,CAAAA,EAAAA,EAAAA,EAAAA,EAAehB,KAIjEiB,EACJ,GAAAxK,EAAAC,GAAA,EAACyJ,EAAAA,EAAQA,CAAAA,CACPpE,KAAK,eACLqE,KAAK,qCACLE,QAAS,IAAON,EAAMjB,EAAYiB,EAAKc,EAAAA,GAAmBA,CAACI,YAAY,EAAI/E,KAAAA,EAC3EkE,SAAU,CAACnB,GAAgC,CAACc,GAAO,CAACmB,CAAAA,EAAAA,EAAAA,EAAAA,EAAkBnB,KAI1E,MACE,GAAAvJ,EAAAK,IAAA,EAAAL,EAAAyE,QAAA,YACG2D,EAAYuC,gBAAgB,CAC7B,GAAA3K,EAAAC,GAAA,EAAC2K,EAAAA,CAAOA,CAAAA,CACNC,SAAU,IAAM3B,IAChB5H,QACE,GAAAtB,EAAAK,IAAA,EAACyK,EAAAA,EAAIA,CAAAA,WACH,GAAA9K,EAAAC,GAAA,EAAC6J,EAAAA,CAAQA,CAAAA,CACPC,GAAIC,CAAAA,EAAAA,EAAAA,EAAAA,EAAsB,CACxBC,SAAUpM,EAAYkB,IAAI,CAC1BmL,aAAcrM,EAAY4F,QAAQ,CAClCwE,aAAcN,EAAI5I,IAAI,CACtBD,MAAO6I,EAAI7I,KAAK,GAElBwG,KAAK,MACLqE,KAAK,aAEP,GAAA3J,EAAAC,GAAA,EAAC6J,EAAAA,CAAQA,CAAAA,CACPC,GAAIC,CAAAA,EAAAA,EAAAA,EAAAA,EAAsB,CACxBC,SAAUpM,EAAYkB,IAAI,CAC1BmL,aAAcrM,EAAY4F,QAAQ,CAClCwE,aAAcN,EAAI5I,IAAI,CACtBD,MAAO6I,EAAI7I,KAAK,CAChBqL,KAAM,OACR,GACA7E,KAAK,YACLqE,KAAK,yBAENjB,EACCe,EAEA,GAAAzJ,EAAAC,GAAA,EAACoB,EAAAA,CAAOA,CAAAA,CAACC,QAASqH,EAAgBD,0BAA0B,CAAEqC,QAAQ,iBACnEtB,IAGJhB,EACC2B,EAEA,GAAApK,EAAAC,GAAA,EAACoB,EAAAA,CAAOA,CAAAA,CAACC,QAASqH,EAAgBF,4BAA4B,CAAEsC,QAAQ,iBACrEX,IAGJ3B,EACC+B,EAEA,GAAAxK,EAAAC,GAAA,EAACoB,EAAAA,CAAOA,CAAAA,CAACC,QAASqH,EAAgBF,4BAA4B,CAAEsC,QAAQ,iBACrEP,OAKTQ,SAAS,uBAET,GAAAhL,EAAAC,GAAA,EAACgL,EAAAA,EAAMA,CAAAA,CAAC3F,KAAM,GAAAtF,EAAAC,GAAA,EAACiL,EAAAA,EAAIA,CAAAA,CAACnM,KAAK,sBAIjC,EAEMiK,EAAyBxB,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,IAc9B2D,EAAAA,CAAgCA,ioBCzJpC,IAAMC,EAAmB,4BAUZ1J,EAAoB,IAC/B,GAAM,CAAC3C,KAAAA,CAAI,CAAED,MAAAA,CAAK,CAAEjB,YAAAA,CAAW,CAAEiD,MAAAA,CAAK,CAAEE,OAAAA,CAAM,CAAC,CAAG6G,EAE5C,CAACwD,EAAUvC,EAAY,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,EAC9BuC,EACA,CACEjC,UAAW,CACTkC,SAAUC,CAAAA,EAAAA,EAAAA,EAAAA,EAAsB3N,EAAakB,EAC/C,CACF,GAEFkK,CAAAA,EAAAA,EAAAA,EAAAA,EAA2BH,EAAa,kBACxC2C,CAAAA,EAAAA,EAAAA,EAAAA,EAAmBJ,GACnBnI,CAAAA,EAAAA,EAAAA,EAAAA,EAA0B4F,EAAa3F,EAAAA,EAAeA,EAEtD,GAAM,CAACnB,KAAAA,CAAI,CAAC,CAAG8G,EACTxB,EACJtF,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAM0J,eAAe,CAAChI,UAAU,IAAK,WAAa1B,MAAAA,EAAAA,KAAAA,EAAAA,EAAM0J,eAAe,CAAGhG,KAAAA,EAEtE,CAACiG,UAAAA,CAAS,CAAEC,QAAAA,CAAO,CAAC,CAAGjO,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,KACnC,GAAI2J,EAAU,CACZ,GAAM,CAACqE,UAAAA,CAAS,CAAEC,QAAAA,CAAO,CAAC,CAAGtE,EAC7B,MAAO,CAACqE,UAAAA,EAAWC,QAAAA,CAAO,CAC5B,CACA,MAAO,CAACD,UAAW,EAAE,CAAEC,QAAS,EAAE,CACpC,EAAG,CAACtE,EAAS,EAEPuE,EAAalO,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,KACzB,GAAI2J,EAAU,CACZ,GAAM,CAACS,KAAAA,CAAI,CAAC,CAAGT,EACf,GAAIS,EAAKpJ,MAAM,CACb,MAAO,IAAIoJ,EAAK,CAGpB,MAAO,EAAE,EACR,CAACT,EAAS,EAEb,MACE,GAAAtH,EAAAC,GAAA,EAAC6L,EAAAA,EAAGA,CAAAA,CAACC,QAAS/K,EAAQgL,OAAQlL,WAC5B,GAAAd,EAAAK,IAAA,EAAC4L,EAAAA,CAAQC,OAAO,mBACd,GAAAlM,EAAAK,IAAA,EAAC8L,EAAAA,EAAOA,CAAAA,WACN,GAAAnM,EAAAC,GAAA,EAACC,MAAAA,CAAIC,MAAO,CAACiM,SAAU,OAAQC,WAAY,SAAUC,WAAY,GAAG,WAClE,GAAAtM,EAAAC,GAAA,EAACsM,EAAAA,EAAIA,CAAAA,CAACxC,GAAIyC,CAAAA,EAAAA,EAAAA,EAAAA,EAAyB3O,EAAa,SAAc0D,MAAA,CAALxC,aACvD,GAAAiB,EAAAC,GAAA,EAACwM,EAAAA,CAAcA,CAAAA,CAAC9C,KAAM5K,QAG1B,GAAAiB,EAAAC,GAAA,EAACyM,EAAAA,EAAWA,CAAAA,UAAEpF,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAUV,WAAW,GAAI,QAEzC,GAAA5G,EAAAC,GAAA,EAACkM,EAAAA,EAAOA,CAAAA,UACLR,EAAUhN,MAAM,EAAIiN,EAAQjN,MAAM,CACjC,GAAAqB,EAAAC,GAAA,EAACyE,EAAAA,CAAGA,CAAAA,CAACI,KAAM,CAACC,UAAW,SAAUC,WAAY,aAAcG,IAAK,CAAC,WAC/D,GAAAnF,EAAAC,GAAA,EAAC0M,EAAAA,UACC,GAAA3M,EAAAC,GAAA,EAAC2M,EAAAA,CAAmBA,CAAAA,CAClBjB,UAAWA,EACXC,QAASA,EACT/N,YAAaA,QAKnB,GAAAmC,EAAAC,GAAA,EAAC4M,EAAAA,EAAaA,CAAAA,CAAC/D,YAAaA,MAGhC,GAAA9I,EAAAC,GAAA,EAACkM,EAAAA,EAAOA,CAAAA,UACLN,CAAU,CAAC,EAAE,CACZ,GAAA7L,EAAAC,GAAA,EAAC6M,EAAAA,CAAcA,CAAAA,CACbvD,IAAKsC,CAAU,CAAC,EAAE,CAClBkB,WAAY,GACZC,UAAS,GACTC,YAAa,GACblO,KAAMA,IAGR,GAAAiB,EAAAC,GAAA,EAAC4M,EAAAA,EAAaA,CAAAA,CAAC/D,YAAaA,MAGhC,GAAA9I,EAAAC,GAAA,EAACkM,EAAAA,EAAOA,CAAAA,UACLN,EAAWlN,MAAM,CAChB,GAAAqB,EAAAC,GAAA,EAACyE,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAAC8B,IAAK,CAAC,WACnB,GAAAzG,EAAAC,GAAA,EAACiN,EAAAA,EAAgBA,CAAAA,CAACC,QAASpO,EAAMgJ,KAAM,IAAI8D,EAAW,CAACuB,OAAO,GAAIC,KAAI,OAGxE,GAAArN,EAAAC,GAAA,EAAC4M,EAAAA,EAAaA,CAAAA,CAAC/D,YAAaA,MAGhC,GAAA9I,EAAAC,GAAA,EAACkM,EAAAA,EAAOA,CAAAA,UACN,GAAAnM,EAAAC,GAAA,EAACyE,EAAAA,CAAGA,CAAAA,CAACI,KAAM,CAACG,eAAgB,UAAU,EAAG9E,MAAO,CAACmN,UAAW,MAAM,WAChE,GAAAtN,EAAAC,GAAA,EAACyH,EAAOA,CACNC,IAAK,CAAC5I,KAAAA,EAAMD,MAAAA,EAAOiJ,KAAM8D,CAAU,EACnCjE,WAAYN,EAAWA,EAASM,UAAU,CAAG,UAC7C/J,YAAaA,YAO3B,EAEa2C,EAAuB,IAEhC,GAAAR,EAAAK,IAAA,EAACkN,EAAAA,EAASA,CAAAA,CAACC,gBAAiBpC,EAAkBqC,OAAM,aAClD,GAAAzN,EAAAC,GAAA,EAACyN,EAAAA,EAAUA,CAAAA,UAAC,SACZ,GAAA1N,EAAAC,GAAA,EAACyN,EAAAA,EAAUA,CAAAA,UAAC,sBACZ,GAAA1N,EAAAC,GAAA,EAACyN,EAAAA,EAAUA,CAAAA,UAAC,eACZ,GAAA1N,EAAAC,GAAA,EAACyN,EAAAA,EAAUA,CAAAA,UAAC,gBACZ,GAAA1N,EAAAC,GAAA,EAACyN,EAAAA,EAAUA,CAAAA,CAAAA,MAKXzB,EAAU0B,CAAAA,EAAAA,EAAAA,EAAAA,EAAOjJ,EAAAA,CAAGA,EAAAA,UAAAA,CAAAA,uFAEC0G,GAIrBuB,EAA6BgB,EAAAA,EAAMA,CAACzN,GAAG,CAAA0N,UAAA,oFAQvCtC,EAAmB9D,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,IAyBxBqG,EAAAA,EAAiBA,CACjBC,EAAAA,CAAwBA,CACxBC,EAAAA,CAAsBA","sources":["webpack://_N_E/../ui-core/src/overview/OverviewJobsTable.tsx","webpack://_N_E/../ui-core/src/jobs/JobsPageContent.tsx","webpack://_N_E/../ui-core/src/instance/JobMenu.tsx","webpack://_N_E/../ui-core/src/workspace/VirtualizedJobRow.tsx"],"sourcesContent":["import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport {useMemo, useRef} from 'react';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {Container, Inner, TABLE_HEADER_HEIGHT} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedJobHeader, VirtualizedJobRow} from '../workspace/VirtualizedJobRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; jobCount: number}\n  | {type: 'job'; repoAddress: RepoAddress; isJob: boolean; name: string};\n\nexport const OverviewJobsTable = ({repos}: Props) => {\n  const parentRef = useRef<HTMLDivElement | null>(null);\n  const allKeys = useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, jobs}) => {\n      flat.push({type: 'header', repoAddress, jobCount: jobs.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        jobs.forEach(({isJob, name}) => {\n          flat.push({type: 'job', repoAddress, isJob, name});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? TABLE_HEADER_HEIGHT : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <div style={{overflow: 'hidden'}}>\n      <Container ref={parentRef}>\n        <VirtualizedJobHeader />\n        <Inner $totalHeight={totalHeight}>\n          {items.map(({index, key, size, start}) => {\n            const row: RowType = flattened[index]!;\n            const type = row!.type;\n            return type === 'header' ? (\n              <RepoRow\n                repoAddress={row.repoAddress}\n                key={key}\n                height={size}\n                start={start}\n                onToggle={onToggle}\n                onToggleAll={onToggleAll}\n                expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                rightElement={\n                  <Tooltip\n                    content={row.jobCount === 1 ? '1 job' : `${row.jobCount} jobs`}\n                    placement=\"top\"\n                  >\n                    <Tag>{row.jobCount}</Tag>\n                  </Tooltip>\n                }\n              />\n            ) : (\n              <VirtualizedJobRow\n                key={key}\n                name={row.name}\n                isJob={row.isJob}\n                repoAddress={row.repoAddress}\n                height={size}\n                start={start}\n              />\n            );\n          })}\n        </Inner>\n      </Container>\n    </div>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Colors,\n  NonIdealState,\n  Spinner,\n  SpinnerWithText,\n  TextInput,\n} from '@dagster-io/ui-components';\nimport {useContext, useMemo} from 'react';\n\nimport {OverviewJobsQuery, OverviewJobsQueryVariables} from './types/JobsPageContent.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {OverviewJobsTable} from '../overview/OverviewJobsTable';\nimport {sortRepoBuckets} from '../overview/sortRepoBuckets';\nimport {visibleRepoKeys} from '../overview/visibleRepoKeys';\nimport {useBlockTraceUntilTrue} from '../performance/TraceContext';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {WorkspaceLocationNodeFragment} from '../workspace/types/WorkspaceQueries.types';\n\nexport const JobsPageContent = () => {\n  const {\n    allRepos,\n    visibleRepos,\n    loading: workspaceLoading,\n    data: cachedData,\n  } = useContext(WorkspaceContext);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewJobsQuery, OverviewJobsQueryVariables>(\n    OVERVIEW_JOBS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading: queryLoading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = useMemo(() => {\n    const cachedEntries = Object.values(cachedData).filter(\n      (location): location is Extract<typeof location, {__typename: 'WorkspaceLocationEntry'}> =>\n        location.__typename === 'WorkspaceLocationEntry',\n    );\n    const workspaceOrError = data?.workspaceOrError;\n    const entries =\n      workspaceOrError?.__typename === 'Workspace'\n        ? workspaceOrError.locationEntries\n        : cachedEntries;\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(entries).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [cachedData, data, visibleRepos]);\n\n  const loading = !data && workspaceLoading;\n\n  useBlockTraceUntilTrue('OverviewJobs', !loading);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, jobs}) => ({\n        repoAddress,\n        jobs: jobs.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({jobs}) => jobs.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading jobs…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching jobs\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in the selected code\n                    locations\n                  </div>\n                ) : (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in your definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No jobs\"\n            description={\n              anyReposHidden\n                ? 'No jobs were found in the selected code locations'\n                : 'No jobs were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewJobsTable repos={filteredBySearch} />;\n  };\n\n  const showSearchSpinner = queryLoading && !data;\n\n  return (\n    <>\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between', grow: 0}}\n      >\n        <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n          {repoCount > 1 ? <RepoFilterButton /> : null}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            rightElement={\n              showSearchSpinner ? <SearchInputSpinner tooltipContent=\"Loading jobs…\" /> : undefined\n            }\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by job name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <QueryRefreshCountdown refreshState={refreshState} />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <SpinnerWithText label=\"Loading jobs…\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\nconst buildBuckets = (\n  locationEntries:\n    | Extract<OverviewJobsQuery['workspaceOrError'], {__typename: 'Workspace'}>['locationEntries']\n    | Extract<WorkspaceLocationNodeFragment, {__typename: 'WorkspaceLocationEntry'}>[],\n): RepoBucket[] => {\n  const entries = locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, pipelines} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const jobs = pipelines\n        .filter(({name}) => !isHiddenAssetGroupJob(name))\n        .map((pipeline) => {\n          return {\n            isJob: pipeline.isJob,\n            name: pipeline.name,\n          };\n        });\n\n      if (jobs.length > 0) {\n        buckets.push({\n          repoAddress,\n          jobs,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_JOBS_QUERY = gql`\n  query OverviewJobsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {Button, Icon, Menu, MenuItem, Popover, Spinner, Tooltip} from '@dagster-io/ui-components';\nimport {useCallback} from 'react';\n\nimport {RunReExecutionQuery, RunReExecutionQueryVariables} from './types/JobMenu.types';\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {useMaterializationAction} from '../assets/LaunchAssetExecutionButton';\nimport {EXECUTION_PLAN_TO_GRAPH_FRAGMENT} from '../gantt/toGraphQueryItems';\nimport {ReexecutionStrategy} from '../graphql/types';\nimport {useBlockTraceOnQueryResult} from '../performance/TraceContext';\nimport {canRunAllSteps, canRunFromFailure} from '../runs/RunActionButtons';\nimport {RunTimeFragment} from '../runs/types/RunUtils.types';\nimport {useJobReexecution} from '../runs/useJobReExecution';\nimport {MenuLink} from '../ui/MenuLink';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePipelinePath} from '../workspace/workspacePath';\n\ninterface Props {\n  job: {isJob: boolean; name: string; runs: RunTimeFragment[]};\n  repoAddress: RepoAddress;\n  isAssetJob: boolean | 'loading';\n}\n\n/**\n * Lazily load more information about the last run for this job, then use that data to inform\n * whether re-execution is possible.\n */\nexport const JobMenu = (props: Props) => {\n  const {job, isAssetJob, repoAddress} = props;\n  const lastRun = job.runs.length ? job.runs[0] : null;\n  const pipelineSelector = {\n    pipelineName: job.name,\n    repositoryName: repoAddress.name,\n    repositoryLocationName: repoAddress.location,\n  };\n\n  const materialize = useMaterializationAction(job.name);\n  const onReexecute = useJobReexecution();\n\n  const {\n    permissions: {canLaunchPipelineReexecution, canLaunchPipelineExecution},\n    disabledReasons,\n  } = usePermissionsForLocation(repoAddress.location);\n\n  const [fetchHasExecutionPlan, queryResult] = useLazyQuery<\n    RunReExecutionQuery,\n    RunReExecutionQueryVariables\n  >(RUN_RE_EXECUTION_QUERY);\n\n  const {data} = queryResult;\n  useBlockTraceOnQueryResult(queryResult, 'RunReExecutionQuery');\n\n  const fetchIfPossible = useCallback(() => {\n    if (lastRun?.id) {\n      fetchHasExecutionPlan({variables: {runId: lastRun.id}});\n    }\n  }, [lastRun, fetchHasExecutionPlan]);\n\n  const run = data?.pipelineRunOrError.__typename === 'Run' ? data?.pipelineRunOrError : null;\n  const executeItem =\n    isAssetJob === 'loading' ? (\n      <MenuItem icon=\"execute\" text=\"Loading...\" disabled={true} />\n    ) : isAssetJob === true ? (\n      <MenuItem\n        icon={materialize.loading ? <Spinner purpose=\"caption-text\" /> : 'execute'}\n        text=\"Launch new run\"\n        disabled={!canLaunchPipelineExecution}\n        onClick={(e) => materialize.onClick(pipelineSelector, e)}\n      />\n    ) : (\n      <MenuLink\n        icon=\"execute\"\n        text=\"Launch new run\"\n        disabled={!canLaunchPipelineExecution}\n        to={workspacePipelinePath({\n          repoName: repoAddress.name,\n          repoLocation: repoAddress.location,\n          pipelineName: job.name,\n          isJob: job.isJob,\n          path: '/playground',\n        })}\n      />\n    );\n\n  const reExecuteAllItem = (\n    <MenuItem\n      icon=\"replay\"\n      text=\"Re-execute latest run\"\n      onClick={() => (run ? onReexecute(run, ReexecutionStrategy.ALL_STEPS) : undefined)}\n      disabled={!canLaunchPipelineReexecution || !run || !canRunAllSteps(run)}\n    />\n  );\n\n  const reExecuteFromFailureItem = (\n    <MenuItem\n      icon=\"sync_problem\"\n      text=\"Re-execute latest run from failure\"\n      onClick={() => (run ? onReexecute(run, ReexecutionStrategy.FROM_FAILURE) : undefined)}\n      disabled={!canLaunchPipelineReexecution || !run || !canRunFromFailure(run)}\n    />\n  );\n\n  return (\n    <>\n      {materialize.launchpadElement}\n      <Popover\n        onOpened={() => fetchIfPossible()}\n        content={\n          <Menu>\n            <MenuLink\n              to={workspacePipelinePath({\n                repoName: repoAddress.name,\n                repoLocation: repoAddress.location,\n                pipelineName: job.name,\n                isJob: job.isJob,\n              })}\n              icon=\"job\"\n              text=\"View job\"\n            />\n            <MenuLink\n              to={workspacePipelinePath({\n                repoName: repoAddress.name,\n                repoLocation: repoAddress.location,\n                pipelineName: job.name,\n                isJob: job.isJob,\n                path: '/runs',\n              })}\n              icon=\"checklist\"\n              text=\"View all recent runs\"\n            />\n            {canLaunchPipelineExecution ? (\n              executeItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineExecution} display=\"block\">\n                {executeItem}\n              </Tooltip>\n            )}\n            {canLaunchPipelineReexecution ? (\n              reExecuteAllItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineReexecution} display=\"block\">\n                {reExecuteAllItem}\n              </Tooltip>\n            )}\n            {canLaunchPipelineReexecution ? (\n              reExecuteFromFailureItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineReexecution} display=\"block\">\n                {reExecuteFromFailureItem}\n              </Tooltip>\n            )}\n          </Menu>\n        }\n        position=\"bottom-left\"\n      >\n        <Button icon={<Icon name=\"expand_more\" />} />\n      </Popover>\n    </>\n  );\n};\n\nconst RUN_RE_EXECUTION_QUERY = gql`\n  query RunReExecutionQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        status\n        pipelineName\n        executionPlan {\n          artifactsPersisted\n          ...ExecutionPlanToGraphFragment\n        }\n      }\n    }\n  }\n  ${EXECUTION_PLAN_TO_GRAPH_FRAGMENT}\n`;\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {Box, MiddleTruncate} from '@dagster-io/ui-components';\nimport {useMemo} from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {CaptionText, LoadingOrNone, useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {buildPipelineSelector} from './WorkspaceContext';\nimport {RepoAddress} from './types';\nimport {SingleJobQuery, SingleJobQueryVariables} from './types/VirtualizedJobRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {JobMenu} from '../instance/JobMenu';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {ScheduleOrSensorTag} from '../nav/ScheduleOrSensorTag';\nimport {useBlockTraceOnQueryResult} from '../performance/TraceContext';\nimport {RunStatusPezList} from '../runs/RunStatusPez';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitch';\nimport {SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitch';\nimport {HeaderCell, HeaderRow, Row, RowCell} from '../ui/VirtualizedTable';\n\nconst TEMPLATE_COLUMNS = '1.5fr 1fr 180px 96px 80px';\n\ninterface JobRowProps {\n  name: string;\n  isJob: boolean;\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedJobRow = (props: JobRowProps) => {\n  const {name, isJob, repoAddress, start, height} = props;\n\n  const [queryJob, queryResult] = useLazyQuery<SingleJobQuery, SingleJobQueryVariables>(\n    SINGLE_JOB_QUERY,\n    {\n      variables: {\n        selector: buildPipelineSelector(repoAddress, name),\n      },\n    },\n  );\n  useBlockTraceOnQueryResult(queryResult, 'SingleJobQuery');\n  useDelayedRowQuery(queryJob);\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const {data} = queryResult;\n  const pipeline =\n    data?.pipelineOrError.__typename === 'Pipeline' ? data?.pipelineOrError : undefined;\n\n  const {schedules, sensors} = useMemo(() => {\n    if (pipeline) {\n      const {schedules, sensors} = pipeline;\n      return {schedules, sensors};\n    }\n    return {schedules: [], sensors: []};\n  }, [pipeline]);\n\n  const latestRuns = useMemo(() => {\n    if (pipeline) {\n      const {runs} = pipeline;\n      if (runs.length) {\n        return [...runs];\n      }\n    }\n    return [];\n  }, [pipeline]);\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\">\n        <RowCell>\n          <div style={{maxWidth: '100%', whiteSpace: 'nowrap', fontWeight: 500}}>\n            <Link to={workspacePathFromAddress(repoAddress, `/jobs/${name}`)}>\n              <MiddleTruncate text={name} />\n            </Link>\n          </div>\n          <CaptionText>{pipeline?.description || ''}</CaptionText>\n        </RowCell>\n        <RowCell>\n          {schedules.length || sensors.length ? (\n            <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 8}}>\n              <ScheduleSensorTagContainer>\n                <ScheduleOrSensorTag\n                  schedules={schedules}\n                  sensors={sensors}\n                  repoAddress={repoAddress}\n                />\n              </ScheduleSensorTagContainer>\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {latestRuns[0] ? (\n            <LastRunSummary\n              run={latestRuns[0]}\n              showButton={false}\n              showHover\n              showSummary={false}\n              name={name}\n            />\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {latestRuns.length ? (\n            <Box padding={{top: 4}}>\n              <RunStatusPezList jobName={name} runs={[...latestRuns].reverse()} fade />\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          <Box flex={{justifyContent: 'flex-end'}} style={{marginTop: '-2px'}}>\n            <JobMenu\n              job={{name, isJob, runs: latestRuns}}\n              isAssetJob={pipeline ? pipeline.isAssetJob : 'loading'}\n              repoAddress={repoAddress}\n            />\n          </Box>\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedJobHeader = () => {\n  return (\n    <HeaderRow templateColumns={TEMPLATE_COLUMNS} sticky>\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Schedules/sensors</HeaderCell>\n      <HeaderCell>Latest run</HeaderCell>\n      <HeaderCell>Run history</HeaderCell>\n      <HeaderCell></HeaderCell>\n    </HeaderRow>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nconst ScheduleSensorTagContainer = styled.div`\n  width: 100%;\n\n  > .bp4-popover2-target {\n    width: 100%;\n  }\n`;\n\nconst SINGLE_JOB_QUERY = gql`\n  query SingleJobQuery($selector: PipelineSelector!) {\n    pipelineOrError(params: $selector) {\n      ... on Pipeline {\n        id\n        name\n        isJob\n        isAssetJob\n        description\n        runs(limit: 5) {\n          id\n          ...RunTimeFragment\n        }\n        schedules {\n          id\n          ...ScheduleSwitchFragment\n        }\n        sensors {\n          id\n          ...SensorSwitchFragment\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_SWITCH_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n"],"names":["OverviewJobsTable","repos","param","parentRef","useRef","allKeys","useMemo","map","repoAddress","repoAddressAsHumanString","expandedKeys","onToggle","onToggleAll","useRepoExpansionState","OVERVIEW_COLLAPSED_KEY","flattened","flat","forEach","jobs","push","type","jobCount","length","repoKey","includes","isJob","name","duplicateRepoNames","findDuplicateRepoNames","rowVirtualizer","useVirtualizer","count","getScrollElement","current","estimateSize","row","ii","TABLE_HEADER_HEIGHT","overscan","totalHeight","getTotalSize","items","getVirtualItems","jsx_runtime","jsx","div","style","overflow","jsxs","Container","ref","VirtualizedJobHeader","Inner","$totalHeight","index","key","size","start","RepoRow","height","expanded","showLocation","has","rightElement","Tooltip","content","concat","placement","Tag","VirtualizedJobRow","JobsPageContent","allRepos","visibleRepos","loading","workspaceLoading","data","cachedData","useContext","WorkspaceContext","searchValue","setSearchValue","useQueryPersistedState","queryKey","defaults","search","repoCount","queryResultOverview","useQuery","OVERVIEW_JOBS_QUERY","fetchPolicy","notifyOnNetworkStatusChange","queryLoading","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","repoBuckets","cachedEntries","Object","values","filter","location","__typename","workspaceOrError","entries","locationEntries","visibleKeys","visibleRepoKeys","buildBuckets","useBlockTraceUntilTrue","sanitizedSearch","trim","toLocaleLowerCase","anySearch","filteredBySearch","searchToLower","showSearchSpinner","Fragment","Box","padding","horizontal","vertical","flex","direction","alignItems","justifyContent","grow","gap","RepoFilterButton","TextInput","icon","value","SearchInputSpinner","tooltipContent","undefined","onChange","e","target","placeholder","width","QueryRefreshCountdown","SpinnerWithText","label","paddingTop","Spinner","purpose","color","Colors","anyReposHidden","top","NonIdealState","title","description","strong","entry","locationOrLoadError","buckets","repo","repositories","pipelines","buildRepoAddress","isHiddenAssetGroupJob","pipeline","sortRepoBuckets","gql","PYTHON_ERROR_FRAGMENT","JobMenu","job","isAssetJob","props","lastRun","runs","pipelineSelector","pipelineName","repositoryName","repositoryLocationName","materialize","useMaterializationAction","onReexecute","useJobReexecution","permissions","canLaunchPipelineReexecution","canLaunchPipelineExecution","disabledReasons","usePermissionsForLocation","fetchHasExecutionPlan","queryResult","useLazyQuery","RUN_RE_EXECUTION_QUERY","useBlockTraceOnQueryResult","fetchIfPossible","useCallback","id","variables","runId","run","pipelineRunOrError","executeItem","MenuItem","text","disabled","onClick","MenuLink","to","workspacePipelinePath","repoName","repoLocation","path","reExecuteAllItem","ReexecutionStrategy","ALL_STEPS","canRunAllSteps","reExecuteFromFailureItem","FROM_FAILURE","canRunFromFailure","launchpadElement","Popover","onOpened","Menu","display","position","Button","Icon","EXECUTION_PLAN_TO_GRAPH_FRAGMENT","TEMPLATE_COLUMNS","queryJob","SINGLE_JOB_QUERY","selector","buildPipelineSelector","useDelayedRowQuery","pipelineOrError","schedules","sensors","latestRuns","Row","$height","$start","RowGrid","border","RowCell","maxWidth","whiteSpace","fontWeight","Link","workspacePathFromAddress","MiddleTruncate","CaptionText","ScheduleSensorTagContainer","ScheduleOrSensorTag","LoadingOrNone","LastRunSummary","showButton","showHover","showSummary","RunStatusPezList","jobName","reverse","fade","marginTop","HeaderRow","templateColumns","sticky","HeaderCell","styled","withConfig","RUN_TIME_FRAGMENT","SCHEDULE_SWITCH_FRAGMENT","SENSOR_SWITCH_FRAGMENT"],"sourceRoot":""}