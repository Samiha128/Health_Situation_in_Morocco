{"version":3,"file":"static/chunks/36373cd3.80eb3d13ff684b64.js","mappings":"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","sources":["webpack://_N_E/../../node_modules/chart.js/dist/chart.mjs"],"sourcesContent":["/*!\n * Chart.js v3.9.1\n * https://www.chartjs.org\n * (c) 2022 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, d as defaults, i as isObject, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as createContext, j as defined, s as sign, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as log10, A as _factorize, B as finiteOrDefault, C as callback, D as _addGrace, E as _limitValue, F as toDegrees, G as _measureText, I as _int16Range, J as _alignPixel, K as toPadding, L as clipArea, M as renderText, N as unclipArea, O as toFont, Q as each, R as _toLeftRightCenter, S as _alignStartEnd, U as overrides, V as merge, W as _capitalize, X as getRelativePosition, Y as _rlookupByKey, Z as _lookupByKey, $ as _isPointInArea, a0 as getAngleFromPoint, a1 as getMaximumSize, a2 as _getParentNode, a3 as readUsedSize, a4 as throttled, a5 as supportsEventListenerOptions, a6 as _isDomSupported, a7 as descriptors, a8 as isFunction, a9 as _attachContext, aa as _createResolver, ab as _descriptors, ac as mergeIf, ad as uid, ae as debounce, af as retinaScale, ag as clearCanvas, ah as setsEqual, ai as _elementsEqual, aj as _isClickEvent, ak as _isBetween, al as _readValueToProps, am as _updateBezierControlPoints, an as _computeSegments, ao as _boundSegments, ap as _steppedInterpolation, aq as _bezierInterpolation, ar as _pointInLine, as as _steppedLineTo, at as _bezierCurveTo, au as drawPoint, av as addRoundedRectPath, aw as toTRBL, ax as toTRBLCorners, ay as _boundSegment, az as _normalizeAngle, aA as getRtlAdapter, aB as overrideTextDirection, aC as _textX, aD as restoreTextDirection, aE as drawPointLegend, aF as noop, aG as distanceBetweenPoints, aH as _setMinAndMaxByKey, aI as niceNum, aJ as almostWhole, aK as almostEquals, aL as _decimalPlaces, aM as _longestText, aN as _filterBetween, aO as _lookup } from './chunks/helpers.segment.mjs';\nexport { d as defaults } from './chunks/helpers.segment.mjs';\n\nclass Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n  _update(date = Date.now()) {\n    let remaining = 0;\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n      for (; i >= 0; --i) {\n        item = items[i];\n        if (item._active) {\n          if (item._total > anims.duration) {\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n      remaining += items.length;\n    });\n    this._lastDate = date;\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\nvar animator = new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  color(from, to, factor) {\n    const c0 = color(from || transparent);\n    const c1 = c0.valid && color(to || transparent);\n    return c1 && c1.valid\n      ? c1.mix(c0, factor).hexString()\n      : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\nclass Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n  active() {\n    return this._active;\n  }\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n  cancel() {\n    if (this._active) {\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n    this._active = from !== to && (loop || (elapsed < duration));\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n    factor = (elapsed / duration) % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n    this._target[prop] = this._fn(from, to, factor);\n  }\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({res, rej});\n    });\n  }\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\n\nconst numbers = ['x', 'y', 'borderWidth', 'radius', 'tension'];\nconst colors = ['color', 'borderColor', 'backgroundColor'];\ndefaults.set('animation', {\n  delay: undefined,\n  duration: 1000,\n  easing: 'easeOutQuart',\n  fn: undefined,\n  from: undefined,\n  loop: undefined,\n  to: undefined,\n  type: undefined,\n});\nconst animationOptions = Object.keys(defaults.animation);\ndefaults.describe('animation', {\n  _fallback: false,\n  _indexable: false,\n  _scriptable: (name) => name !== 'onProgress' && name !== 'onComplete' && name !== 'fn',\n});\ndefaults.set('animations', {\n  colors: {\n    type: 'color',\n    properties: colors\n  },\n  numbers: {\n    type: 'number',\n    properties: numbers\n  },\n});\ndefaults.describe('animations', {\n  _fallback: 'animation',\n});\ndefaults.set('transitions', {\n  active: {\n    animation: {\n      duration: 400\n    }\n  },\n  resize: {\n    animation: {\n      duration: 0\n    }\n  },\n  show: {\n    animations: {\n      colors: {\n        from: 'transparent'\n      },\n      visible: {\n        type: 'boolean',\n        duration: 0\n      },\n    }\n  },\n  hide: {\n    animations: {\n      colors: {\n        to: 'transparent'\n      },\n      visible: {\n        type: 'boolean',\n        easing: 'linear',\n        fn: v => v | 0\n      },\n    }\n  }\n});\nclass Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n    const animatedProps = this._properties;\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {\n      });\n    }\n    return animations;\n  }\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n      if (animation) {\n        if (cfg && animation.active()) {\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        target[prop] = value;\n        continue;\n      }\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n  update(target, values) {\n    if (this._properties.size === 0) {\n      Object.assign(target, values);\n      return;\n    }\n    const animations = this._createAnimations(target, values);\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\n  }\n  return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\nfunction toClip(value) {\n  let t, r, b, l;\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n  if (value === null) {\n    return;\n  }\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isNumberFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\nfunction convertObjectDataToArray(data) {\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n  return adata;\n}\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || (stacked === undefined && meta.stack !== undefined);\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if ((positive && value > 0) || (!positive && value < 0)) {\n      return meta.index;\n    }\n  }\n  return null;\n}\nfunction updateStacks(controller, parsed) {\n  const {chart, _cachedMeta: meta} = controller;\n  const stacks = chart._stacks || (chart._stacks = {});\n  const {iScale, vScale, index: datasetIndex} = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {[iAxis]: index, [vAxis]: value} = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n  }\n}\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n  return createContext(parent,\n    {\n      active: false,\n      dataset: undefined,\n      datasetIndex: index,\n      index,\n      mode: 'default',\n      type: 'dataset'\n    }\n  );\n}\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\nfunction clearStacks(meta, items) {\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n  }\n}\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\nclass DatasetController {\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.initialize();\n  }\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n  }\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale\n      ? meta.vScale\n      : meta.iScale;\n  }\n  reset() {\n    this._update('reset');\n  }\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n    if (isObject(data)) {\n      this._data = convertObjectDataToArray(data);\n    } else if (_data !== data) {\n      if (_data) {\n        unlistenArrayEvents(_data, this);\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n  addElements() {\n    const meta = this._cachedMeta;\n    this._dataCheck();\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n    this._dataCheck();\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n    this._resyncElements(resetNewElements);\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n  parse(start, count) {\n    const {_cachedMeta: meta, _data: data} = this;\n    const {iScale, _stacked} = meta;\n    const iAxis = iScale.axis;\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]\n    };\n    return applyStack(stack, value, meta.index, {mode});\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\n    let i, parsed;\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        break;\n      }\n    }\n    if (sorted) {\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isNumberFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n  getMaxOverflow() {\n    return false;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n  update(mode) {}\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || (elements.length - start);\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset\n      ? this.resolveDatasetElementOptions(mode)\n      : this.resolveDataElementOptions(index || 0, mode);\n  }\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context ||\n        (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context ||\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    const context = () => this.getContext(index, active);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n    if (values.$shared) {\n      values.$shared = sharing;\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n    return values;\n  }\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {sharedOptions, includeOptions};\n  }\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      options: (!active && this.getSharedOptions(options)) || options\n    });\n  }\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n    if (count) {\n      this.parse(0, count);\n    }\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n    const move = (arr) => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n  updateElements(element, start, count, mode) {}\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\nDatasetController.defaults = {};\nDatasetController.prototype.datasetElementType = null;\nDatasetController.prototype.dataElementType = null;\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      return;\n    }\n    if (defined(prev)) {\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n  return min;\n}\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n  if (prev === null) {\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n  if (next === null) {\n    next = curr + curr - prev;\n  }\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n  item[vScale.axis] = barEnd;\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n  if (edge === true) {\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\n    return;\n  }\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto'\n    ? ratio === 1 ? 0.33 : 0\n    : inflateAmount;\n}\nclass BarController extends DatasetController {\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n  getMaxOverflow() {\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n  _getStacks(last, dataIndex) {\n    const {iScale} = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\n      .filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n    const skipNull = (meta) => {\n      const parsed = meta.controller.getParsed(dataIndex);\n      const val = parsed && parsed[meta.vScale.axis];\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n    return stacks;\n  }\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1;\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n  _calculateBarValuePixels(index) {\n    const {_cachedMeta: {vScale, _stacked}, options: {base: baseValue, minBarLength}} = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      head = base;\n    }\n    size = head - base;\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n    }\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount);\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n}\nBarController.id = 'bar';\nBarController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'bar',\n  categoryPercentage: 0.8,\n  barPercentage: 0.9,\n  grouped: true,\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'base', 'width', 'height']\n    }\n  }\n};\nBarController.overrides = {\n  scales: {\n    _index_: {\n      type: 'category',\n      offset: true,\n      grid: {\n        offset: true\n      }\n    },\n    _value_: {\n      type: 'linear',\n      beginAtZero: true,\n    }\n  }\n};\n\nclass BubbleController extends DatasetController {\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n    return {\n      label: meta.label,\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n  update(mode) {\n    const points = this._cachedMeta.data;\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n    if (values.$shared) {\n      values = Object.assign({}, values, {$shared: false});\n    }\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n    return values;\n  }\n}\nBubbleController.id = 'bubble';\nBubbleController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'point',\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'borderWidth', 'radius']\n    }\n  }\n};\nBubbleController.overrides = {\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  },\n  plugins: {\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        }\n      }\n    }\n  }\n};\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {ratioX, ratioY, offsetX, offsetY};\n}\nclass DoughnutController extends DatasetController {\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n  linkScales() {}\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = (i) => +data[i];\n      if (isObject(data[start])) {\n        const {key = 'value'} = this._parsing;\n        getter = (i) => +resolveObjectKey(data[i], key);\n      }\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n    return {\n      rotation: min,\n      circumference: max - min,\n    };\n  }\n  update(mode) {\n    const chart = this.chart;\n    const {chartArea} = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n    const {circumference, rotation} = this._getRotationExtents();\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n    meta.total = this.calculateTotal();\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n    return total;\n  }\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n    if (!arcs) {\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n    if (!arcs) {\n      return 0;\n    }\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n  getMaxOffset(arcs) {\n    let max = 0;\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n    return ringWeightOffset;\n  }\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\nDoughnutController.id = 'doughnut';\nDoughnutController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: false\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n    },\n  },\n  cutout: '50%',\n  rotation: 0,\n  circumference: 360,\n  radius: '100%',\n  spacing: 0,\n  indexAxis: 'r',\n};\nDoughnutController.descriptors = {\n  _scriptable: (name) => name !== 'spacing',\n  _indexable: (name) => name !== 'spacing',\n};\nDoughnutController.overrides = {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels(chart) {\n          const data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            const {labels: {pointStyle}} = chart.legend.options;\n            return data.labels.map((label, i) => {\n              const meta = chart.getDatasetMeta(0);\n              const style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    },\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        },\n        label(tooltipItem) {\n          let dataLabel = tooltipItem.label;\n          const value = ': ' + tooltipItem.formattedValue;\n          if (isArray(dataLabel)) {\n            dataLabel = dataLabel.slice();\n            dataLabel[0] += value;\n          } else {\n            dataLabel += value;\n          }\n          return dataLabel;\n        }\n      }\n    }\n  }\n};\n\nclass LineController extends DatasetController {\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {dataset: line, data: points = [], _dataset} = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n    this.updateElements(points, start, count, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\nLineController.id = 'line';\nLineController.defaults = {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  showLine: true,\n  spanGaps: false,\n};\nLineController.overrides = {\n  scales: {\n    _index_: {\n      type: 'category',\n    },\n    _value_: {\n      type: 'linear',\n    },\n  }\n};\n\nclass PolarAreaController extends DatasetController {\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n    return range;\n  }\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n    this.outerRadius = outerRadius - (radiusLength * this.index);\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n    const defaultAngle = 360 / this.countVisibleElements();\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n    return count;\n  }\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index)\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n      : 0;\n  }\n}\nPolarAreaController.id = 'polarArea';\nPolarAreaController.defaults = {\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: true\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n    },\n  },\n  indexAxis: 'r',\n  startAngle: 0,\n};\nPolarAreaController.overrides = {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels(chart) {\n          const data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            const {labels: {pointStyle}} = chart.legend.options;\n            return data.labels.map((label, i) => {\n              const meta = chart.getDatasetMeta(0);\n              const style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    },\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        },\n        label(context) {\n          return context.chart.data.labels[context.dataIndex] + ': ' + context.formattedValue;\n        }\n      }\n    }\n  },\n  scales: {\n    r: {\n      type: 'radialLinear',\n      angleLines: {\n        display: false\n      },\n      beginAtZero: true,\n      grid: {\n        circular: true\n      },\n      pointLabels: {\n        display: false\n      },\n      startAngle: 0\n    }\n  }\n};\n\nclass PieController extends DoughnutController {\n}\nPieController.id = 'pie';\nPieController.defaults = {\n  cutout: 0,\n  rotation: 0,\n  circumference: 360,\n  radius: '100%'\n};\n\nclass RadarController extends DatasetController {\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n    line.points = points;\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n      this.updateElement(line, undefined, properties, mode);\n    }\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\nRadarController.id = 'radar';\nRadarController.defaults = {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  indexAxis: 'r',\n  showLine: true,\n  elements: {\n    line: {\n      fill: 'start'\n    }\n  },\n};\nRadarController.overrides = {\n  aspectRatio: 1,\n  scales: {\n    r: {\n      type: 'radialLinear',\n    }\n  }\n};\n\nclass Element {\n  constructor() {\n    this.x = undefined;\n    this.y = undefined;\n    this.active = false;\n    this.options = undefined;\n    this.$animations = undefined;\n  }\n  tooltipPosition(useFinalPosition) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n  getProps(props, final) {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      return this;\n    }\n    const ret = {};\n    props.forEach(prop => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n    });\n    return ret;\n  }\n}\nElement.defaults = {};\nElement.defaultRoutes = undefined;\n\nconst formatters = {\n  values(value) {\n    return isArray(value) ? value : '' + value;\n  },\n  numeric(tickValue, index, ticks) {\n    if (tickValue === 0) {\n      return '0';\n    }\n    const locale = this.chart.options.locale;\n    let notation;\n    let delta = tickValue;\n    if (ticks.length > 1) {\n      const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\n      if (maxTick < 1e-4 || maxTick > 1e+15) {\n        notation = 'scientific';\n      }\n      delta = calculateDelta(tickValue, ticks);\n    }\n    const logDelta = log10(Math.abs(delta));\n    const numDecimal = Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);\n    const options = {notation, minimumFractionDigits: numDecimal, maximumFractionDigits: numDecimal};\n    Object.assign(options, this.options.ticks.format);\n    return formatNumber(tickValue, locale, options);\n  },\n  logarithmic(tickValue, index, ticks) {\n    if (tickValue === 0) {\n      return '0';\n    }\n    const remain = tickValue / (Math.pow(10, Math.floor(log10(tickValue))));\n    if (remain === 1 || remain === 2 || remain === 5) {\n      return formatters.numeric.call(this, tickValue, index, ticks);\n    }\n    return '';\n  }\n};\nfunction calculateDelta(tickValue, ticks) {\n  let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\n  if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\n    delta = tickValue - Math.floor(tickValue);\n  }\n  return delta;\n}\nvar Ticks = {formatters};\n\ndefaults.set('scale', {\n  display: true,\n  offset: false,\n  reverse: false,\n  beginAtZero: false,\n  bounds: 'ticks',\n  grace: 0,\n  grid: {\n    display: true,\n    lineWidth: 1,\n    drawBorder: true,\n    drawOnChartArea: true,\n    drawTicks: true,\n    tickLength: 8,\n    tickWidth: (_ctx, options) => options.lineWidth,\n    tickColor: (_ctx, options) => options.color,\n    offset: false,\n    borderDash: [],\n    borderDashOffset: 0.0,\n    borderWidth: 1\n  },\n  title: {\n    display: false,\n    text: '',\n    padding: {\n      top: 4,\n      bottom: 4\n    }\n  },\n  ticks: {\n    minRotation: 0,\n    maxRotation: 50,\n    mirror: false,\n    textStrokeWidth: 0,\n    textStrokeColor: '',\n    padding: 3,\n    display: true,\n    autoSkip: true,\n    autoSkipPadding: 3,\n    labelOffset: 0,\n    callback: Ticks.formatters.values,\n    minor: {},\n    major: {},\n    align: 'center',\n    crossAlign: 'near',\n    showLabelBackdrop: false,\n    backdropColor: 'rgba(255, 255, 255, 0.75)',\n    backdropPadding: 2,\n  }\n});\ndefaults.route('scale.ticks', 'color', '', 'color');\ndefaults.route('scale.grid', 'color', '', 'borderColor');\ndefaults.route('scale.grid', 'borderColor', '', 'borderColor');\ndefaults.route('scale.title', 'color', '', 'color');\ndefaults.describe('scale', {\n  _fallback: false,\n  _scriptable: (name) => !name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',\n  _indexable: (name) => name !== 'borderDash' && name !== 'tickBorderDash',\n});\ndefaults.describe('scales', {\n  _fallback: 'scale',\n});\ndefaults.describe('scale.ticks', {\n  _scriptable: (name) => name !== 'backdropPadding' && name !== 'callback',\n  _indexable: (name) => name !== 'backdropPadding',\n});\n\nfunction autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const ticksLimit = tickOpts.maxTicksLimit || determineMaxTicks(scale);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n  next = start;\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n  if (len < 2) {\n    return false;\n  }\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\n\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6;\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\nfunction garbageCollect(caches, length) {\n  each(caches, (cache) => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n  return (lines * font.lineHeight) + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\nfunction titleAlign(align, position, reverse) {\n  let ret = _toLeftRightCenter(align);\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n  const {top, left, bottom, right, chart} = scale;\n  const {chartArea, scales} = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {titleX, titleY, maxWidth, rotation};\n}\nclass Scale extends Element {\n  constructor(cfg) {\n    super();\n    this.id = cfg.id;\n    this.type = cfg.type;\n    this.options = undefined;\n    this.ctx = cfg.ctx;\n    this.chart = cfg.chart;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this.maxWidth = undefined;\n    this.maxHeight = undefined;\n    this.paddingTop = undefined;\n    this.paddingBottom = undefined;\n    this.paddingLeft = undefined;\n    this.paddingRight = undefined;\n    this.axis = undefined;\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    this.ticks = [];\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    this._startPixel = undefined;\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n  init(options) {\n    this.options = options.setContext(this.getContext());\n    this.axis = options.axis;\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n  parse(raw, index) {\n    return raw;\n  }\n  getUserBounds() {\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isNumberFinite(_userMin),\n      maxDefined: isNumberFinite(_userMax)\n    };\n  }\n  getMinMax(canStack) {\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    let range;\n    if (minDefined && maxDefined) {\n      return {min, max};\n    }\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n  getTicks() {\n    return this.ticks;\n  }\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n  beforeUpdate() {\n    callback(this.options.beforeUpdate, [this]);\n  }\n  update(maxWidth, maxHeight, margins) {\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\n    const sampleSize = tickOpts.sampleSize;\n    this.beforeUpdate();\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n    this._maxLength = this.isHorizontal()\n      ? this.width + margins.left + margins.right\n      : this.height + margins.top + margins.bottom;\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n    this.beforeBuildTicks();\n    this.ticks = this.buildTicks() || [];\n    this.afterBuildTicks();\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n    this.configure();\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation();\n    this.afterCalculateLabelRotation();\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n    if (samplingEnabled) {\n      this._convertTicksToLabels(this.ticks);\n    }\n    this.beforeFit();\n    this.fit();\n    this.afterFit();\n    this.afterUpdate();\n  }\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n  afterUpdate() {\n    callback(this.options.afterUpdate, [this]);\n  }\n  beforeSetDimensions() {\n    callback(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = 0;\n      this.bottom = this.height;\n    }\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    callback(this.options.afterSetDimensions, [this]);\n  }\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    callback(this.options[name], [this]);\n  }\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n  beforeTickToLabelConversion() {\n    callback(this.options.beforeTickToLabelConversion, [this]);\n  }\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = callback(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    callback(this.options.afterTickToLabelConversion, [this]);\n  }\n  beforeCalculateLabelRotation() {\n    callback(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = this.ticks.length;\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\n      ));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    callback(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n  beforeFit() {\n    callback(this.options.beforeFit, [this]);\n  }\n  fit() {\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight;\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n      if (tickOpts.display && this.ticks.length) {\n        const {first, last, widest, highest} = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n        if (isHorizontal) {\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n    this._handleMargins();\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n  _calculatePadding(first, last, sin, cos) {\n    const {ticks: {align, padding}, position} = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n  afterFit() {\n    callback(this.options.afterFit, [this]);\n  }\n  isHorizontal() {\n    const {axis, position} = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  isFullSize() {\n    return this.options.fullSize;\n  }\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n    this.generateTickLabels(ticks);\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n    this.afterTickToLabelConversion();\n  }\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length);\n    }\n    return labelSizes;\n  }\n  _computeLabelSizes(ticks, length) {\n    const {ctx, _longestTextCache: caches} = this;\n    const widths = [];\n    const heights = [];\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n    for (i = 0; i < length; ++i) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights,\n    };\n  }\n  getLabelForValue(value) {\n    return value;\n  }\n  getPixelForValue(value, index) {\n    return NaN;\n  }\n  getValueForPixel(pixel) {}\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n  getBaseValue() {\n    const {min, max} = this;\n    return min < 0 && max < 0 ? max :\n      min > 0 && max > 0 ? min :\n      0;\n  }\n  getContext(index) {\n    const ticks = this.ticks || [];\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context ||\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context ||\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n    return this.isHorizontal()\n      ? h * cos > w * sin ? w / cos : h / sin\n      : h * sin < w * cos ? h / cos : w / sin;\n  }\n  _isVisible() {\n    const display = this.options.display;\n    if (display !== 'auto') {\n      return !!display;\n    }\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {grid, position} = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n    const borderOpts = grid.setContext(this.getContext());\n    const axisWidth = borderOpts.drawBorder ? borderOpts.borderWidth : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function(pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const optsAtIndex = grid.setContext(this.getContext(i));\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndex.borderDash || [];\n      const borderDashOffset = optsAtIndex.borderDashOffset;\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n      lineValue = getPixelForGridLine(this, i, offset);\n      if (lineValue === undefined) {\n        continue;\n      }\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset,\n      });\n    }\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n    return items;\n  }\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {position, ticks: optionTicks} = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {align, crossAlign, padding, mirror} = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n      if (isHorizontal) {\n        x = pixel;\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n      let backdrop;\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n        let top = y + textOffset - labelPadding.top;\n        let left = x - labelPadding.left;\n        switch (textBaseline) {\n        case 'middle':\n          top -= height / 2;\n          break;\n        case 'bottom':\n          top -= height;\n          break;\n        }\n        switch (textAlign) {\n        case 'center':\n          left -= width / 2;\n          break;\n        case 'right':\n          left -= width;\n          break;\n        }\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n          color: optsAtIndex.backdropColor,\n        };\n      }\n      items.push({\n        rotation,\n        label,\n        font,\n        color,\n        strokeColor,\n        strokeWidth,\n        textOffset,\n        textAlign: tickTextAlign,\n        textBaseline,\n        translation: [x, y],\n        backdrop,\n      });\n    }\n    return items;\n  }\n  _getXAxisLabelAlignment() {\n    const {position, ticks} = this.options;\n    const rotation = -toRadians(this.labelRotation);\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n    let align = 'center';\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n    return align;\n  }\n  _getYAxisLabelAlignment(tl) {\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n    let textAlign;\n    let x;\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += (widest / 2);\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n    return {textAlign, x};\n  }\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n    const chart = this.chart;\n    const position = this.options.position;\n    if (position === 'left' || position === 'right') {\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\n    } if (position === 'top' || position === 'bottom') {\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\n    }\n  }\n  drawBackground() {\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n        if (grid.drawOnChartArea) {\n          drawLine(\n            {x: item.x1, y: item.y1},\n            {x: item.x2, y: item.y2},\n            item\n          );\n        }\n        if (grid.drawTicks) {\n          drawLine(\n            {x: item.tx1, y: item.ty1},\n            {x: item.tx2, y: item.ty2},\n            {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            }\n          );\n        }\n      }\n    }\n  }\n  drawBorder() {\n    const {chart, ctx, options: {grid}} = this;\n    const borderOpts = grid.setContext(this.getContext());\n    const axisWidth = grid.drawBorder ? borderOpts.borderWidth : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.borderWidth;\n    ctx.strokeStyle = borderOpts.borderColor;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n    ctx.restore();\n  }\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n    if (!optionTicks.display) {\n      return;\n    }\n    const ctx = this.ctx;\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    let i, ilen;\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      const item = items[i];\n      const tickFont = item.font;\n      const label = item.label;\n      if (item.backdrop) {\n        ctx.fillStyle = item.backdrop.color;\n        ctx.fillRect(item.backdrop.left, item.backdrop.top, item.backdrop.width, item.backdrop.height);\n      }\n      let y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, item);\n    }\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n  drawTitle() {\n    const {ctx, options: {position, title, reverse}} = this;\n    if (!title.display) {\n      return;\n    }\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      return [{\n        z: tz,\n        draw: (chartArea) => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n    return [{\n      z: gz,\n      draw: (chartArea) => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: gz + 1,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: (chartArea) => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\n\nclass TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n    if (isIChartComponent(proto)) {\n      parentScope = this.register(proto);\n    }\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n    if (id in items) {\n      return scope;\n    }\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n    return scope;\n  }\n  get(id) {\n    return this.items[id];\n  }\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n    if (id in items) {\n      delete items[id];\n    }\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\nfunction registerDefaults(item, scope, parentScope) {\n  const itemDefaults = merge(Object.create(null), [\n    parentScope ? defaults.get(parentScope) : {},\n    defaults.get(scope),\n    item.defaults\n  ]);\n  defaults.set(scope, itemDefaults);\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n  add(...args) {\n    this._each('register', args);\n  }\n  remove(...args) {\n    this._each('unregister', args);\n  }\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\n        this._exec(method, reg, arg);\n      } else {\n        each(arg, item => {\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    callback(component['before' + camelMethod], [], component);\n    registry[method](component);\n    callback(component['after' + camelMethod], [], component);\n  }\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    return this.plugins;\n  }\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n}\nvar registry = new Registry();\n\nclass ScatterController extends DatasetController {\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {data: points = []} = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    if (this.options.showLine) {\n      const {dataset: line, _dataset} = meta;\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    }\n    this.updateElements(points, start, count, mode);\n  }\n  addElements() {\n    const {showLine} = this.options;\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = registry.getElement('line');\n    }\n    super.addElements();\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\nScatterController.id = 'scatter';\nScatterController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'point',\n  showLine: false,\n  fill: false\n};\nScatterController.overrides = {\n  interaction: {\n    mode: 'point'\n  },\n  plugins: {\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        },\n        label(item) {\n          return '(' + item.label + ', ' + item.formattedValue + ')';\n        }\n      }\n    }\n  },\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  }\n};\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPolarAreaController: PolarAreaController,\nPieController: PieController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\nfunction abstract() {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\nclass DateAdapter {\n  constructor(options) {\n    this.options = options || {};\n  }\n  init(chartOptions) {}\n  formats() {\n    return abstract();\n  }\n  parse(value, format) {\n    return abstract();\n  }\n  format(timestamp, format) {\n    return abstract();\n  }\n  add(timestamp, amount, unit) {\n    return abstract();\n  }\n  diff(a, b, unit) {\n    return abstract();\n  }\n  startOf(timestamp, unit, weekday) {\n    return abstract();\n  }\n  endOf(timestamp, unit) {\n    return abstract();\n  }\n}\nDateAdapter.override = function(members) {\n  Object.assign(DateAdapter.prototype, members);\n};\nvar adapters = {\n  _date: DateAdapter\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {controller, data, _sorted} = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {lo: start.lo, hi: end.hi};\n      }\n    }\n  }\n  return {lo: 0, hi: data.length - 1};\n}\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {index, data} = metasets[i];\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n  return function(pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n  function evaluationFunc(element, datasetIndex, index) {\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{element, datasetIndex, index}];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n  return axis === 'r' && !intersect\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\nvar Interaction = {\n  evaluateInteractionItems,\n  modes: {\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n      if (!items.length) {\n        return [];\n      }\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n        const index = items[0].index;\n        const element = meta.data[index];\n        if (element && !element.skip) {\n          elements.push({element, datasetIndex: meta.index, index});\n        }\n      });\n      return elements;\n    },\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({element: data[i], datasetIndex, index: i});\n        }\n      }\n      return items;\n    },\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\n\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ?\n      v0.index - v1.index :\n      v0.weight - v1.weight;\n  });\n}\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && (pos + stack),\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {stack, pos, stackWeight} = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {fullSize} = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {pos, box} = layout;\n  const maxPadding = chartArea.maxPadding;\n  if (!isObject(pos)) {\n    if (layout.size) {\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n  return layout.horizontal\n    ? {same: widthChanged, other: heightChanged}\n    : {same: heightChanged, other: widthChanged};\n}\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function marginForPositions(positions) {\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\n    positions.forEach((pos) => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n  return horizontal\n    ? marginForPositions(['left', 'right'])\n    : marginForPositions(['top', 'bottom']);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n    box.update(\n      layout.width || chartArea.w,\n      layout.height || chartArea.h,\n      getMargins(layout.horizontal, chartArea)\n    );\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\n    refit |= same && refitBoxes.length;\n    changed = changed || other;\n    if (!box.fullSize) {\n      refitBoxes.push(layout);\n    }\n  }\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {x, y} = chartArea;\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\n    const weight = (layout.stackWeight / stack.weight) || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n  chartArea.x = x;\n  chartArea.y = y;\n}\ndefaults.set('layout', {\n  autoPadding: true,\n  padding: {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  }\n});\nvar layouts = {\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    item._layers = item._layers || function() {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n    chart.boxes.push(item);\n  },\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n    handleMaxPadding(chartArea);\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w,\n    };\n    each(boxes.chartArea, (layout) => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\n    });\n  }\n};\n\nclass BasePlatform {\n  acquireContext(canvas, aspectRatio) {}\n  releaseContext(context) {\n    return false;\n  }\n  addEventListener(chart, type, listener) {}\n  removeEventListener(chart, type, listener) {}\n  getDevicePixelRatio() {\n    return 1;\n  }\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n  isAttached(canvas) {\n    return true;\n  }\n  updateConfig(config) {\n  }\n}\n\nclass BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\n\nconst EXPANDO_KEY = '$chartjs';\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\nconst isNullOrEmpty = value => value === null || value === '';\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n  style.display = style.display || 'block';\n  style.boxSizing = style.boxSizing || 'border-box';\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n  return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {x, y} = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null,\n  };\n}\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      listener();\n    }\n  }, window);\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n  return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled((event) => {\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart, (args) => {\n    const event = args[0];\n    return [event, event.offsetX, event.offsetY];\n  });\n  addListener(canvas, type, proxy);\n  return proxy;\n}\nclass DomPlatform extends BasePlatform {\n  acquireContext(canvas, aspectRatio) {\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n    if (context && context.canvas === canvas) {\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n    return null;\n  }\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach((prop) => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n    const style = initial.style || {};\n    Object.keys(style).forEach((key) => {\n      canvas.style[key] = style[key];\n    });\n    canvas.width = canvas.width;\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n  addEventListener(chart, type, listener) {\n    this.removeEventListener(chart, type);\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n    if (!proxy) {\n      return;\n    }\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n  isAttached(canvas) {\n    const container = _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\n\nfunction _detectPlatform(canvas) {\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\n\nclass PluginService {\n  constructor() {\n    this._init = [];\n  }\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n    return true;\n  }\n  invalidate() {\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n    const descriptors = this._cache = this._createDescriptors(chart);\n    this._notifyStateChanges(chart);\n    return descriptors;\n  }\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n  return {plugins, localIds};\n}\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\n    });\n  }\n  return result;\n}\nfunction pluginOpts(config, {plugin, local}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n\nfunction getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\nfunction determineAxis(id, scaleOptions) {\n  if (id === 'x' || id === 'y') {\n    return id;\n  }\n  return scaleOptions.axis || axisFromPosition(scaleOptions.position) || id.charAt(0).toLowerCase();\n}\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {scales: {}};\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const firstIDs = Object.create(null);\n  const scales = Object.create(null);\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    firstIDs[axis] = firstIDs[axis] || id;\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || firstIDs[axis] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n  return scales;\n}\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n  initOptions(config);\n  return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\nclass Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n  get platform() {\n    return this._config.platform;\n  }\n  get type() {\n    return this._config.type;\n  }\n  set type(type) {\n    this._config.type = type;\n  }\n  get data() {\n    return this._config.data;\n  }\n  set data(data) {\n    this._config.data = initData(data);\n  }\n  get options() {\n    return this._config.options;\n  }\n  set options(options) {\n    this._config.options = options;\n  }\n  get plugins() {\n    return this._config.plugins;\n  }\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType,\n      () => [[\n        `datasets.${datasetType}`,\n        ''\n      ]]);\n  }\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`,\n      () => [\n        [\n          `datasets.${datasetType}.transitions.${transition}`,\n          `transitions.${transition}`,\n        ],\n        [\n          `datasets.${datasetType}`,\n          ''\n        ]\n      ]);\n  }\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`,\n      () => [[\n        `datasets.${datasetType}.elements.${elementType}`,\n        `datasets.${datasetType}`,\n        `elements.${elementType}`,\n        ''\n      ]]);\n  }\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`,\n      () => [[\n        `plugins.${id}`,\n        ...plugin.additionalOptionScopes || [],\n      ]]);\n  }\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {options, type} = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n    const scopes = new Set();\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n  chartOptionScopes() {\n    const {options, type} = this;\n    return [\n      options,\n      overrides[type] || {},\n      defaults.datasets[type] || {},\n      {type},\n      defaults,\n      descriptors\n    ];\n  }\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {$shared: true};\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context)\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\n      : resolver;\n  }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\nconst hasFunction = value => isObject(value)\n  && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);\nfunction needContext(proxy, names) {\n  const {isScriptable, isIndexable} = _descriptors(proxy);\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\n      || (indexable && isArray(value))) {\n      return true;\n    }\n  }\n  return false;\n}\n\nvar version = \"3.9.1\";\n\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n}\nfunction compare2Level(l1, l2) {\n  return function(a, b) {\n    return a[l1] === b[l1]\n      ? a[l2] - b[l2]\n      : a[l1] - b[l1];\n  };\n}\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  chart.notifyPlugins('afterRender');\n  callback(animationOptions && animationOptions.onComplete, [context], chart);\n}\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callback(animationOptions && animationOptions.onProgress, [context], chart);\n}\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    item = item[0];\n  }\n  if (item && item.canvas) {\n    item = item.canvas;\n  }\n  return item;\n}\nconst instances = {};\nconst getChart = (key) => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\nclass Chart {\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error(\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\n      );\n    }\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n    instances[this.id] = this;\n    if (!context || !canvas) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n  get aspectRatio() {\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      return aspectRatio;\n    }\n    if (maintainAspectRatio && _aspectRatio) {\n      return _aspectRatio;\n    }\n    return height ? width / height : null;\n  }\n  get data() {\n    return this.config.data;\n  }\n  set data(data) {\n    this.config.data = data;\n  }\n  get options() {\n    return this._options;\n  }\n  set options(options) {\n    this.config.options = options;\n  }\n  _initialize() {\n    this.notifyPlugins('beforeInit');\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n    this.bindEvents();\n    this.notifyPlugins('afterInit');\n    return this;\n  }\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {width, height};\n    }\n  }\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n    this.notifyPlugins('resize', {size: newSize});\n    callback(options.onResize, [this, newSize], this);\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        this.render();\n      }\n    }\n  }\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n    if (scaleOpts) {\n      items = items.concat(\n        Object.keys(scaleOpts).map((id) => {\n          const scaleOptions = scaleOpts[id];\n          const axis = determineAxis(id, scaleOptions);\n          const isRadial = axis === 'r';\n          const isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        })\n      );\n    }\n    each(items, (item) => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n      scale.init(scaleOptions, options);\n    });\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n    each(scales, (scale) => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n  _removeUnreferencedMetasets() {\n    const {_metasets: metasets, data: {datasets}} = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n    this._removeUnreferencedMetasets();\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\n        Object.assign(ControllerClass.prototype, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n    this._updateMetasets();\n    return newControllers;\n  }\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n  update(mode) {\n    const config = this.config;\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n    this._plugins.invalidate();\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n    const newControllers = this.buildOrUpdateControllers();\n    this.notifyPlugins('beforeElementsUpdate');\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {controller} = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n    if (!animsDisabled) {\n      each(newControllers, (controller) => {\n        controller.reset();\n      });\n    }\n    this._updateDatasets(mode);\n    this.notifyPlugins('afterUpdate', {mode});\n    this._layers.sort(compare2Level('z', '_idx'));\n    const {_active, _lastEvent} = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n    this.render();\n  }\n  _updateScales() {\n    each(this.scales, (scale) => {\n      layouts.removeBox(this, scale);\n    });\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n  _updateHiddenIndices() {\n    const {_hiddenIndices} = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {method, start, count} of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = (idx) => new Set(\n      _dataChanges\n        .filter(c => c[0] === idx)\n        .map((c, i) => i + ',' + c.splice(1).join(','))\n    );\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet)\n      .map(c => c.split(','))\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\n  }\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\n      return;\n    }\n    layouts.update(this, this.width, this.height, minPadding);\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n    this._layers = [];\n    each(this.boxes, (box) => {\n      if (noArea && box.position === 'chartArea') {\n        return;\n      }\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n    this.notifyPlugins('afterLayout');\n  }\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\n    }\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\n  }\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {meta, index, mode, cancelable: true};\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n    meta.controller._update(mode);\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n  render() {\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\n      return;\n    }\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({chart: this});\n    }\n  }\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {width, height} = this._resizeBeforeDraw;\n      this._resize(width, height);\n      this._resizeBeforeDraw = null;\n    }\n    this.clear();\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\n      return;\n    }\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this._drawDatasets();\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this.notifyPlugins('afterDraw');\n  }\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\n      return;\n    }\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = this.chartArea;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n    meta.controller.draw();\n    if (useClip) {\n      unclipArea(ctx);\n    }\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n    return [];\n  }\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n    return meta;\n  }\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\n  }\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n    const meta = this.getDatasetMeta(datasetIndex);\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      anims.update(meta, {visible});\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {canvas, ctx} = this;\n    this._stop();\n    this.config.clearCache();\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n    this.notifyPlugins('destroy');\n    delete instances[this.id];\n    this.notifyPlugins('afterDestroy');\n  }\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n    each(this.options.events, (type) => _add(type, listener));\n  }\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n    let detached;\n    const attached = () => {\n      _remove('attach', attached);\n      this.attached = true;\n      this.resize();\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n    detached = () => {\n      this.attached = false;\n      _remove('resize', listener);\n      this._stop();\n      this._resize(0, 0);\n      _add('attach', attached);\n    };\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed) {\n      this._active = active;\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n    if (changed || args.changed) {\n      this.render();\n    }\n    return this;\n  }\n  _handleEvent(e, replay, inChartArea) {\n    const {_active: lastActive = [], options} = this;\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n    if (inChartArea) {\n      this._lastEvent = null;\n      callback(options.onHover, [e, active, this], this);\n      if (isClick) {\n        callback(options.onClick, [e, active, this], this);\n      }\n    }\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n    this._lastEvent = lastEvent;\n    return changed;\n  }\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive;\n    }\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\nconst invalidatePlugins = () => each(Chart.instances, (chart) => chart._plugins.invalidate());\nconst enumerable = true;\nObject.defineProperties(Chart, {\n  defaults: {\n    enumerable,\n    value: defaults\n  },\n  instances: {\n    enumerable,\n    value: instances\n  },\n  overrides: {\n    enumerable,\n    value: overrides\n  },\n  registry: {\n    enumerable,\n    value: registry\n  },\n  version: {\n    enumerable,\n    value: version\n  },\n  getChart: {\n    enumerable,\n    value: getChart\n  },\n  register: {\n    enumerable,\n    value: (...items) => {\n      registry.add(...items);\n      invalidatePlugins();\n    }\n  },\n  unregister: {\n    enumerable,\n    value: (...items) => {\n      registry.remove(...items);\n      invalidatePlugins();\n    }\n  }\n});\n\nfunction clipArc(ctx, element, endAngle) {\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\n  let angleMargin = pixelMargin / outerRadius;\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\nfunction parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n  const computeOuterLimit = (val) => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n  };\n}\nfunction rThetaToXY(r, theta, x, y) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta),\n  };\n}\nfunction pathArc(ctx, element, offset, spacing, end, circular) {\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n  let spacingOffset = 0;\n  const alpha = end - start;\n  if (spacing) {\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n  ctx.beginPath();\n  if (circular) {\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerEndAdjustedAngle);\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), startAngle + (innerStart / innerRadius), true);\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n  ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n  const {fullCircles, startAngle, circumference} = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, startAngle + TAU, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + circumference % TAU;\n      if (circumference % TAU === 0) {\n        endAngle += TAU;\n      }\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\nfunction drawFullCircleBorders(ctx, element, inner) {\n  const {x, y, startAngle, pixelMargin, fullCircles} = element;\n  const outerRadius = Math.max(element.outerRadius - pixelMargin, 0);\n  const innerRadius = element.innerRadius + pixelMargin;\n  let i;\n  if (inner) {\n    clipArc(ctx, element, startAngle + TAU);\n  }\n  ctx.beginPath();\n  ctx.arc(x, y, innerRadius, startAngle + TAU, startAngle, true);\n  for (i = 0; i < fullCircles; ++i) {\n    ctx.stroke();\n  }\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle, startAngle + TAU);\n  for (i = 0; i < fullCircles; ++i) {\n    ctx.stroke();\n  }\n}\nfunction drawBorder(ctx, element, offset, spacing, endAngle, circular) {\n  const {options} = element;\n  const {borderWidth, borderJoinStyle} = options;\n  const inner = options.borderAlign === 'inner';\n  if (!borderWidth) {\n    return;\n  }\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n  if (element.fullCircles) {\n    drawFullCircleBorders(ctx, element, inner);\n  }\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.stroke();\n}\nclass ArcElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(chartX, chartY, useFinalPosition) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference'\n    ], useFinalPosition);\n    const rAdjust = this.options.spacing / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n    return (betweenAngles && withinRadius);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\n      'x',\n      'y',\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference',\n    ], useFinalPosition);\n    const {offset, spacing} = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n  tooltipPosition(useFinalPosition) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n  draw(ctx) {\n    const {options, circumference} = this;\n    const offset = (options.offset || 0) / 2;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n    ctx.save();\n    let radiusOffset = 0;\n    if (offset) {\n      radiusOffset = offset / 2;\n      const halfAngle = (this.startAngle + this.endAngle) / 2;\n      ctx.translate(Math.cos(halfAngle) * radiusOffset, Math.sin(halfAngle) * radiusOffset);\n      if (this.circumference >= PI) {\n        radiusOffset = offset;\n      }\n    }\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    const endAngle = drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, endAngle, circular);\n    ctx.restore();\n  }\n}\nArcElement.id = 'arc';\nArcElement.defaults = {\n  borderAlign: 'center',\n  borderColor: '#fff',\n  borderJoinStyle: undefined,\n  borderRadius: 0,\n  borderWidth: 2,\n  offset: 0,\n  spacing: 0,\n  angle: undefined,\n  circular: true,\n};\nArcElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor'\n};\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n  return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\n  const {start: segmentStart, end: segmentEnd} = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\nfunction pathSegment(ctx, line, segment, params) {\n  const {points, options} = line;\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  let {move = true, reverse} = params || {};\n  let i, point, prev;\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n    if (point.skip) {\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    prev = point;\n  }\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n  return !!loop;\n}\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {count, start, ilen} = pathVars(points, segment, params);\n  const {move = true, reverse} = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n    if (point.skip) {\n      continue;\n    }\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      ctx.lineTo(x, y);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    lastY = y;\n  }\n  drawX();\n}\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n  return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n  const {segments, options} = line;\n  const segmentMethod = _getSegmentMethod(line);\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\nclass LineElement extends Element {\n  constructor(cfg) {\n    super();\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n  get points() {\n    return this._points;\n  }\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {property, start: value, end: value});\n    if (!segments.length) {\n      return;\n    }\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {start, end} = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n    start = start || 0;\n    count = count || (this.points.length - start);\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\n    }\n    return !!loop;\n  }\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n    if (points.length && options.borderWidth) {\n      ctx.save();\n      draw(ctx, this, start, count);\n      ctx.restore();\n    }\n    if (this.animated) {\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\nLineElement.id = 'line';\nLineElement.defaults = {\n  borderCapStyle: 'butt',\n  borderDash: [],\n  borderDashOffset: 0,\n  borderJoinStyle: 'miter',\n  borderWidth: 3,\n  capBezierPoints: true,\n  cubicInterpolationMode: 'default',\n  fill: false,\n  spanGaps: false,\n  stepped: false,\n  tension: 0,\n};\nLineElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\nLineElement.descriptors = {\n  _scriptable: true,\n  _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n};\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n  const options = el.options;\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\n}\nclass PointElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    const options = this.options;\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange$1(this, mouseX, 'x', useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange$1(this, mouseY, 'y', useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n  size(options) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n  draw(ctx, area) {\n    const options = this.options;\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n  getRange() {\n    const options = this.options || {};\n    return options.radius + options.hitRadius;\n  }\n}\nPointElement.id = 'point';\nPointElement.defaults = {\n  borderWidth: 1,\n  hitRadius: 1,\n  hoverBorderWidth: 1,\n  hoverRadius: 4,\n  pointStyle: 'circle',\n  radius: 3,\n  rotation: 0\n};\nPointElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\n\nfunction getBarBounds(bar, useFinalPosition) {\n  const {x, y, base, width, height} = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);\n  let left, right, top, bottom, half;\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n  return {left, top, right, bottom};\n}\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n  const enableBorder = enableBorderRadius || isObject(value);\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n  return bounds\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\nclass BarElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  draw(ctx) {\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\n    const {inner, outer} = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n    ctx.save();\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n    ctx.restore();\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {x, y, base, horizontal} = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\nBarElement.id = 'bar';\nBarElement.defaults = {\n  borderSkipped: 'start',\n  borderWidth: 0,\n  borderRadius: 0,\n  inflateAmount: 'auto',\n  pointStyle: undefined\n};\nBarElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nLineElement: LineElement,\nPointElement: PointElement,\nBarElement: BarElement\n});\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  const samples = options.samples || availableWidth;\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n  const decimated = [];\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n  decimated[sampledIndex++] = data[a];\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {x: pointAx, y: pointAy} = data[a];\n    maxArea = area = -1;\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs(\n        (pointAx - avgX) * (data[j].y - pointAy) -\n        (pointAx - data[j].x) * (avgY - pointAy)\n      );\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n  decimated[sampledIndex++] = data[endIndex];\n  return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      const lastIndex = i - 1;\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX,\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n      if (i > 0 && lastIndex !== startIndex) {\n        decimated.push(data[lastIndex]);\n      }\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n  return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {value: data});\n  }\n}\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach((dataset) => {\n    cleanDecimatedDataset(dataset);\n  });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n  let start = 0;\n  let count;\n  const {iScale} = meta;\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n  return {start, count};\n}\nvar plugin_decimation = {\n  id: 'decimation',\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false,\n  },\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      cleanDecimatedData(chart);\n      return;\n    }\n    const availableWidth = chart.width;\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {_data, indexAxis} = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        return;\n      }\n      if (!meta.controller.supportsDecimation) {\n        return;\n      }\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        return;\n      }\n      if (chart.options.parsing) {\n        return;\n      }\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n      if (isNullOrUndef(_data)) {\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function() {\n            return this._decimated;\n          },\n          set: function(d) {\n            this._data = d;\n          }\n        });\n      }\n      let decimated;\n      switch (options.algorithm) {\n      case 'lttb':\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\n        break;\n      case 'min-max':\n        decimated = minMaxDecimation(data, start, count, availableWidth);\n        break;\n      default:\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n      dataset._decimated = decimated;\n    });\n  },\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n\nfunction _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n  for (const segment of segments) {\n    let {start, end} = segment;\n    end = _findSegmentEnd(start, end, points);\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n    if (!target.segments) {\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n    const targetSegments = _boundSegments(target, bounds);\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {property, start, end};\n}\nfunction _pointsFromSegments(boundary, line) {\n  const {x = null, y = null} = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({start, end}) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({x: first.x, y});\n      points.push({x: last.x, y});\n    } else if (x !== null) {\n      points.push({x, y: first.y});\n      points.push({x, y: last.y});\n    }\n  });\n  return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n  for (;end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n  if (isArray(boundary)) {\n    _loop = true;\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n  return points.length ? new LineElement({\n    points,\n    options: {tension: 0},\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\nfunction _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n  if (!propagate) {\n    return fill;\n  }\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isNumberFinite(fill)) {\n      return fill;\n    }\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n    if (target.visible) {\n      return fill;\n    }\n    visited.push(fill);\n    fill = target.fill;\n  }\n  return false;\n}\nfunction _decodeFill(line, index, count) {\n  const fill = parseFillOption(line);\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n  let target = parseFloat(fill);\n  if (isNumberFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n  return target;\n}\nfunction _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\nfunction _getTargetValue(fill, scale, startValue) {\n  let value;\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n  if (fill === false || fill === null) {\n    return false;\n  }\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\n\nfunction _buildStackLine(source) {\n  const {scale, index, line} = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({points, options: {}});\n}\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\n    if (!point || (first && last)) {\n      continue;\n    }\n    if (first) {\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {first, last, point};\n}\n\nclass simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n  pathSegment(ctx, bounds, opts) {\n    const {x, y, radius} = this;\n    bounds = bounds || {start: 0, end: TAU};\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n  interpolate(point) {\n    const {x, y, radius} = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\n\nfunction _getTarget(source) {\n  const {chart, fill, line} = source;\n  if (isNumberFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n  if (fill === 'shape') {\n    return true;\n  }\n  const boundary = computeBoundary(source);\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n  return _createBoundaryLine(boundary, line);\n}\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n  const {scale = {}, fill} = source;\n  const pixel = _getTargetPixel(fill, scale);\n  if (isNumberFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n  return null;\n}\nfunction computeCircularBoundary(source) {\n  const {scale, fill} = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {line, scale, axis} = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {above = color, below = color} = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {line, target, above, below, area, scale, axis});\n    unclipArea(ctx);\n  }\n}\nfunction doFill(ctx, cfg) {\n  const {line, target, above, below, area, scale} = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n  ctx.save();\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {line, target, color: above, scale, property});\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {line, target, color: below, scale, property});\n  ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\nfunction fill(ctx, cfg) {\n  const {line, target, property, color, scale} = cfg;\n  const segments = _segments(line, target, property);\n  for (const {source: src, target: tgt, start, end} of segments) {\n    const {style: {backgroundColor = color} = {}} = src;\n    const notShape = target !== true;\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n    ctx.beginPath();\n    const lineLoop = !!line.pathSegment(ctx, src);\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n    ctx.restore();\n  }\n}\nfunction clipBounds(ctx, scale, bounds) {\n  const {top, bottom} = scale.chart.chartArea;\n  const {property, start, end} = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\nvar index = {\n  id: 'filler',\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line,\n        };\n      }\n      meta.$filler = source;\n      sources.push(source);\n    }\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n  constructor(config) {\n    super();\n    this._added = false;\n    this.legendHitBoxes = [];\n    this._hoveredItem = null;\n    this.doughnutMode = false;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = callback(labelOpts.generateLabels, [this.chart], this) || [];\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\n    }\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n    this.legendItems = legendItems;\n  }\n  fit() {\n    const {options, ctx} = this;\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\n    let width, height;\n    ctx.font = labelFont.string;\n    if (this.isHorizontal()) {\n      width = this.maxWidth;\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight;\n      width = this._fitCols(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    }\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n    return totalHeight;\n  }\n  _fitCols(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n    let left = 0;\n    let col = 0;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({width: currentColWidth, height: currentColHeight});\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n    totalWidth += currentColWidth;\n    columnSizes.push({width: currentColWidth, height: currentColHeight});\n    return totalWidth;\n  }\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n      this._draw();\n      unclipArea(ctx);\n    }\n  }\n  _draw() {\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\n    const {align, labels: labelOpts} = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {color: fontColor, padding} = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n    this.drawTitle();\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\n    const drawLegendBox = function(x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n      ctx.save();\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n      if (labelOpts.usePointStyle) {\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n        ctx.beginPath();\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n      ctx.restore();\n    };\n    const fillText = function(x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n    overrideTextDirection(this.ctx, opts.textDirection);\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor || fontColor;\n      ctx.fillStyle = legendItem.fontColor || fontColor;\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n      rtlHelper.setWidth(this.width);\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n      const realX = rtlHelper.x(x);\n      drawLegendBox(realX, y, legendItem);\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n      fillText(rtlHelper.x(x), y, legendItem);\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    if (!titleOpts.display) {\n      return;\n    }\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n    let left = this.left;\n    let maxWidth = this.width;\n    if (this.isHorizontal()) {\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n    const x = _alignStartEnd(position, left, left + maxWidth);\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n    if (_isBetween(x, this.left, this.right)\n      && _isBetween(y, this.top, this.bottom)) {\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          return this.legendItems[i];\n        }\n      }\n    }\n    return null;\n  }\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        callback(opts.onLeave, [e, previous, this], this);\n      }\n      this._hoveredItem = hoveredItem;\n      if (hoveredItem && !sameItem) {\n        callback(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      callback(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\nvar plugin_legend = {\n  id: 'legend',\n  _element: Legend,\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: (ctx) => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {labels: {usePointStyle, pointStyle, textAlign, color}} = chart.legend.options;\n        return chart._getSortedDatasetMetas().map((meta) => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: 0,\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n    title: {\n      color: (ctx) => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: '',\n    }\n  },\n  descriptors: {\n    _scriptable: (name) => !name.startsWith('on'),\n    labels: {\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n    }\n  },\n};\n\nclass Title extends Element {\n  constructor(config) {\n    super();\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n    this.left = 0;\n    this.top = 0;\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n  _drawArgs(offset) {\n    const {top, left, bottom, right, options} = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {titleX, titleY, maxWidth, rotation};\n  }\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    if (!opts.display) {\n      return;\n    }\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n}\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\nvar plugin_title = {\n  id: 'title',\n  _element: Title,\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold',\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n  id: 'subtitle',\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal',\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n\nconst positioners = {\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n    let i, len;\n    let x = 0;\n    let y = 0;\n    let count = 0;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n    return {\n      x,\n      y\n    };\n  }\n};\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n  return base;\n}\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\nfunction createTooltipItem(chart, item) {\n  const {element, datasetIndex, index} = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {label, value} = controller.getLabelAndValue(index);\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {body, footer, title} = tooltip;\n  const {boxWidth, boxHeight} = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\n\t\t\t+ options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop\n\t\t\t+ footerLineCount * footerFont.lineHeight\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\n  }\n  let widthPadding = 0;\n  const maxLineWidth = function(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n  ctx.save();\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\n  each(body, (bodyItem) => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n  widthPadding = 0;\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n  ctx.restore();\n  width += padding.width;\n  return {width, height};\n}\nfunction determineYAlign(chart, size) {\n  const {y, height} = size;\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > (chart.height - height / 2)) {\n    return 'bottom';\n  }\n  return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {x, width} = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {x, width} = size;\n  const {width: chartWidth, chartArea: {left, right}} = chart;\n  let xAlign = 'center';\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n  return xAlign;\n}\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\nfunction alignX(size, xAlign) {\n  let {x, width} = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= (width / 2);\n  }\n  return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n  let {y, height} = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= (height / 2);\n  }\n  return y;\n}\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {caretSize, caretPadding, cornerRadius} = options;\n  const {xAlign, yAlign} = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n  return align === 'center'\n    ? tooltip.x + tooltip.width / 2\n    : align === 'right'\n      ? tooltip.x + tooltip.width - padding.right\n      : tooltip.x + padding.left;\n}\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\nclass Tooltip extends Element {\n  constructor(config) {\n    super();\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart || config._chart;\n    this._chart = this.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n    if (cached) {\n      return cached;\n    }\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getContext() {\n    return this.$context ||\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n  getTitle(context, options) {\n    const {callbacks} = options;\n    const beforeTitle = callbacks.beforeTitle.apply(this, [context]);\n    const title = callbacks.title.apply(this, [context]);\n    const afterTitle = callbacks.afterTitle.apply(this, [context]);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n    return lines;\n  }\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(options.callbacks.beforeBody.apply(this, [tooltipItems]));\n  }\n  getBody(tooltipItems, options) {\n    const {callbacks} = options;\n    const bodyItems = [];\n    each(tooltipItems, (context) => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(scoped.beforeLabel.call(this, context)));\n      pushOrConcat(bodyItem.lines, scoped.label.call(this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(scoped.afterLabel.call(this, context)));\n      bodyItems.push(bodyItem);\n    });\n    return bodyItems;\n  }\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(options.callbacks.afterBody.apply(this, [tooltipItems]));\n  }\n  getFooter(tooltipItems, options) {\n    const {callbacks} = options;\n    const beforeFooter = callbacks.beforeFooter.apply(this, [tooltipItems]);\n    const footer = callbacks.footer.apply(this, [tooltipItems]);\n    const afterFooter = callbacks.afterFooter.apply(this, [tooltipItems]);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n    return lines;\n  }\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n    each(tooltipItems, (context) => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(scoped.labelColor.call(this, context));\n      labelPointStyles.push(scoped.labelPointStyle.call(this, context));\n      labelTextColors.push(scoped.labelTextColor.call(this, context));\n    });\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n    if (changed && options.external) {\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\n    }\n  }\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n  getCaretPosition(tooltipPoint, size, options) {\n    const {xAlign, yAlign} = this;\n    const {caretSize, cornerRadius} = options;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n    const {x: ptX, y: ptY} = tooltipPoint;\n    const {width, height} = size;\n    let x1, x2, x3, y1, y2, y3;\n    if (yAlign === 'center') {\n      y2 = ptY + (height / 2);\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {x1, x2, x3, y1, y2, y3};\n  }\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.titleAlign, options);\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing;\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing;\n        }\n      }\n    }\n  }\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColors = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2,\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.fillStyle = labelColors.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      ctx.lineWidth = isObject(labelColors.borderWidth) ? Math.max(...Object.values(labelColors.borderWidth)) : (labelColors.borderWidth || 1);\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.setLineDash(labelColors.borderDash || []);\n      ctx.lineDashOffset = labelColors.borderDashOffset || 0;\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);\n      const borderRadius = toTRBLCorners(labelColors.borderRadius);\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n  drawBody(pt, ctx, options) {\n    const {body} = this;\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n    const fillLineOfText = function(line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\n      : 0;\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n      lines = bodyItem.lines;\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n      each(bodyItem.after, fillLineOfText);\n    }\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing;\n  }\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n      footerFont = toFont(options.footerFont);\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {xAlign, yAlign} = this;\n    const {x, y} = pt;\n    const {width, height} = tooltipSize;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n    ctx.fill();\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n  _willRender() {\n    return !!this.opacity;\n  }\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n    if (!opacity) {\n      return;\n    }\n    this._updateAnimationTarget(options);\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n    const padding = toPadding(options.padding);\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n      this.drawBackground(pt, ctx, tooltipSize, options);\n      overrideTextDirection(ctx, options.textDirection);\n      pt.y += padding.top;\n      this.drawTitle(pt, ctx, options);\n      this.drawBody(pt, ctx, options);\n      this.drawFooter(pt, ctx, options);\n      restoreTextDirection(ctx, options.textDirection);\n      ctx.restore();\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n    const positionChanged = this._positionChanged(active, e);\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n    if (changed) {\n      this._active = active;\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n        this.update(true, replay);\n      }\n    }\n    return changed;\n  }\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive;\n    }\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n    if (options.reverse) {\n      active.reverse();\n    }\n    return active;\n  }\n  _positionChanged(active, e) {\n    const {caretX, caretY, options} = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\nTooltip.positioners = positioners;\nvar plugin_tooltip = {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({chart, options});\n    }\n  },\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n      if (chart.notifyPlugins('beforeTooltipDraw', args) === false) {\n        return;\n      }\n      tooltip.draw(chart.ctx);\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        args.changed = true;\n      }\n    }\n  },\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold',\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {\n    },\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold',\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart',\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: {\n      beforeTitle: noop,\n      title(tooltipItems) {\n        if (tooltipItems.length > 0) {\n          const item = tooltipItems[0];\n          const labels = item.chart.data.labels;\n          const labelCount = labels ? labels.length : 0;\n          if (this && this.options && this.options.mode === 'dataset') {\n            return item.dataset.label || '';\n          } else if (item.label) {\n            return item.label;\n          } else if (labelCount > 0 && item.dataIndex < labelCount) {\n            return labels[item.dataIndex];\n          }\n        }\n        return '';\n      },\n      afterTitle: noop,\n      beforeBody: noop,\n      beforeLabel: noop,\n      label(tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n          return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n          label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n          label += value;\n        }\n        return label;\n      },\n      labelColor(tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n          borderColor: options.borderColor,\n          backgroundColor: options.backgroundColor,\n          borderWidth: options.borderWidth,\n          borderDash: options.borderDash,\n          borderDashOffset: options.borderDashOffset,\n          borderRadius: 0,\n        };\n      },\n      labelTextColor() {\n        return this.options.bodyColor;\n      },\n      labelPointStyle(tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n          pointStyle: options.pointStyle,\n          rotation: options.rotation,\n        };\n      },\n      afterLabel: noop,\n      afterBody: noop,\n      beforeFooter: noop,\n      footer: noop,\n      afterFooter: noop\n    }\n  },\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n  descriptors: {\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false,\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n  additionalOptionScopes: ['interaction']\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({index, label: raw});\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\nclass CategoryScale extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {index, label} of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n  determineDataLimits() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this.getMinMax(true);\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n    for (let value = min; value <= max; value++) {\n      ticks.push({value});\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n      return labels[value];\n    }\n    return value;\n  }\n  configure() {\n    super.configure();\n    if (!this.isHorizontal()) {\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n  getBasePixel() {\n    return this.bottom;\n  }\n}\nCategoryScale.id = 'category';\nCategoryScale.defaults = {\n  ticks: {\n    callback: CategoryScale.prototype.getLabelForValue\n  }\n};\n\nfunction generateTicks$1(generationOptions, dataRange) {\n  const ticks = [];\n  const MIN_SPACING = 1e-14;\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {min: rmin, max: rmax} = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{value: rmin}, {value: rmax}];\n  }\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n  if (!isNullOrUndef(precision)) {\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    numSpaces = (niceMax - niceMin) / spacing;\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n  const decimalPlaces = Math.max(\n    _decimalPlaces(spacing),\n    _decimalPlaces(niceMin)\n  );\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({value: min});\n      if (niceMin < min) {\n        j++;\n      }\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n  for (; j < numSpaces; ++j) {\n    ticks.push({value: Math.round((niceMin + j * spacing) * factor) / factor});\n  }\n  if (maxDefined && includeBounds && niceMax !== max) {\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({value: max});\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({value: niceMax});\n  }\n  return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n    return +raw;\n  }\n  handleTickRangeOptions() {\n    const {beginAtZero} = this.options;\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this;\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n    if (min === max) {\n      let offset = 1;\n      if (max >= Number.MAX_SAFE_INTEGER || min <= Number.MIN_SAFE_INTEGER) {\n        offset = Math.abs(max * 0.05);\n      }\n      setMax(max + offset);\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    let {maxTicksLimit, stepSize} = tickOpts;\n    let maxTicks;\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n    return maxTicks;\n  }\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n    super.configure();\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\n\nclass LinearScale extends LinearScaleBase {\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? min : 0;\n    this.max = isNumberFinite(max) ? max : 1;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\nLinearScale.id = 'linear';\nLinearScale.defaults = {\n  ticks: {\n    callback: Ticks.formatters.numeric\n  }\n};\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / (Math.pow(10, Math.floor(log10(tickVal))));\n  return remain === 1;\n}\nfunction generateTicks(generationOptions, dataRange) {\n  const endExp = Math.floor(log10(dataRange.max));\n  const endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));\n  const ticks = [];\n  let tickVal = finiteOrDefault(generationOptions.min, Math.pow(10, Math.floor(log10(dataRange.min))));\n  let exp = Math.floor(log10(tickVal));\n  let significand = Math.floor(tickVal / Math.pow(10, exp));\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  do {\n    ticks.push({value: tickVal, major: isMajor(tickVal)});\n    ++significand;\n    if (significand === 10) {\n      significand = 1;\n      ++exp;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;\n  } while (exp < endExp || (exp === endExp && significand < endSignificand));\n  const lastTick = finiteOrDefault(generationOptions.max, tickVal);\n  ticks.push({value: lastTick, major: isMajor(tickVal)});\n  return ticks;\n}\nclass LogarithmicScale extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isNumberFinite(value) && value > 0 ? value : null;\n  }\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n    this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n    this.handleTickRangeOptions();\n  }\n  handleTickRangeOptions() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n    const exp = (v, m) => Math.pow(10, Math.floor(log10(v)) + m);\n    if (min === max) {\n      if (min <= 0) {\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(exp(min, -1));\n        setMax(exp(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(exp(max, -1));\n    }\n    if (max <= 0) {\n      setMax(exp(min, +1));\n    }\n    if (this._zero && this.min !== this._suggestedMin && min === exp(this.min, 0)) {\n      setMin(exp(min, -1));\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    return value === undefined\n      ? '0'\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n  configure() {\n    const start = this.min;\n    super.configure();\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min\n      ? 0\n      : (log10(value) - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\nLogarithmicScale.id = 'logarithmic';\nLogarithmicScale.defaults = {\n  ticks: {\n    callback: Ticks.formatters.logarithmic,\n    major: {\n      enabled: true\n    }\n  }\n};\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - (size / 2),\n      end: pos + (size / 2)\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\nfunction fitWithPointLabels(scale) {\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n  scale.setCenterPoint(\n    orig.l - limits.l,\n    limits.r - orig.r,\n    orig.t - limits.t,\n    limits.b - orig.b\n  );\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const extra = getTickBackdropHeight(opts) / 2;\n  const outerDistance = scale.drawingArea;\n  const additionalAngle = opts.pointLabels.centerPointLabels ? PI / valueCount : 0;\n  for (let i = 0; i < valueCount; i++) {\n    const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const size = labelSizes[i];\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    items.push({\n      x: pointLabelPosition.x,\n      y,\n      textAlign,\n      left,\n      top: y,\n      right: left + size.w,\n      bottom: y + size.h\n    });\n  }\n  return items;\n}\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n  return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= (w / 2);\n  }\n  return x;\n}\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= (h / 2);\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\nfunction drawPointLabels(scale, labelCount) {\n  const {ctx, options: {pointLabels}} = scale;\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    const plFont = toFont(optsAtIndex.font);\n    const {x, y, textAlign, left, top, right, bottom} = scale._pointLabelItems[i];\n    const {backdropColor} = optsAtIndex;\n    if (!isNullOrUndef(backdropColor)) {\n      const borderRadius = toTRBLCorners(optsAtIndex.borderRadius);\n      const padding = toPadding(optsAtIndex.backdropPadding);\n      ctx.fillStyle = backdropColor;\n      const backdropLeft = left - padding.left;\n      const backdropTop = top - padding.top;\n      const backdropWidth = right - left + padding.width;\n      const backdropHeight = bottom - top + padding.height;\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: backdropLeft,\n          y: backdropTop,\n          w: backdropWidth,\n          h: backdropHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n      }\n    }\n    renderText(\n      ctx,\n      scale._pointLabels[i],\n      x,\n      y + (plFont.lineHeight / 2),\n      plFont,\n      {\n        color: optsAtIndex.color,\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      }\n    );\n  }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {ctx} = scale;\n  if (circular) {\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n  const {color, lineWidth} = gridLineOpts;\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n    return;\n  }\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(gridLineOpts.borderDash);\n  ctx.lineDashOffset = gridLineOpts.borderDashOffset;\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\nclass RadialLinearScale extends LinearScaleBase {\n  constructor(cfg) {\n    super(cfg);\n    this.xCenter = undefined;\n    this.yCenter = undefined;\n    this.drawingArea = undefined;\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n  setDimensions() {\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(false);\n    this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n    this._pointLabels = this.getLabels()\n      .map((value, index) => {\n        const label = callback(this.options.pointLabels.callback, [value, index], this);\n        return label || label === 0 ? label : '';\n      })\n      .filter((v, i) => this.chart.getDataVisibility(i));\n  }\n  fit() {\n    const opts = this.options;\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n  getPointLabelPosition(index) {\n    const {left, top, right, bottom} = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom,\n    };\n  }\n  drawBackground() {\n    const {backgroundColor, grid: {circular}} = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {angleLines, grid} = opts;\n    const labelCount = this._pointLabels.length;\n    let i, offset, position;\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const optsAtIndex = grid.setContext(this.getContext(index - 1));\n          drawRadiusLine(this, optsAtIndex, offset, labelCount);\n        }\n      });\n    }\n    if (angleLines.display) {\n      ctx.save();\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {color, lineWidth} = optsAtIndex;\n        if (!lineWidth || !color) {\n          continue;\n        }\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n      ctx.restore();\n    }\n  }\n  drawBorder() {}\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    if (!tickOpts.display) {\n      return;\n    }\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && !opts.reverse) {\n        return;\n      }\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(\n          -width / 2 - padding.left,\n          -offset - tickFont.size / 2 - padding.top,\n          width + padding.width,\n          tickFont.size + padding.height\n        );\n      }\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n      });\n    });\n    ctx.restore();\n  }\n  drawTitle() {}\n}\nRadialLinearScale.id = 'radialLinear';\nRadialLinearScale.defaults = {\n  display: true,\n  animate: true,\n  position: 'chartArea',\n  angleLines: {\n    display: true,\n    lineWidth: 1,\n    borderDash: [],\n    borderDashOffset: 0.0\n  },\n  grid: {\n    circular: false\n  },\n  startAngle: 0,\n  ticks: {\n    showLabelBackdrop: true,\n    callback: Ticks.formatters.numeric\n  },\n  pointLabels: {\n    backdropColor: undefined,\n    backdropPadding: 2,\n    display: true,\n    font: {\n      size: 10\n    },\n    callback(label) {\n      return label;\n    },\n    padding: 5,\n    centerPointLabels: false\n  }\n};\nRadialLinearScale.defaultRoutes = {\n  'angleLines.color': 'borderColor',\n  'pointLabels.color': 'color',\n  'ticks.color': 'color'\n};\nRadialLinearScale.descriptors = {\n  angleLines: {\n    _fallback: 'grid'\n  }\n};\n\nconst INTERVALS = {\n  millisecond: {common: true, size: 1, steps: 1000},\n  second: {common: true, size: 1000, steps: 60},\n  minute: {common: true, size: 60000, steps: 60},\n  hour: {common: true, size: 3600000, steps: 24},\n  day: {common: true, size: 86400000, steps: 30},\n  week: {common: false, size: 604800000, steps: 4},\n  month: {common: true, size: 2.628e9, steps: 12},\n  quarter: {common: false, size: 7.884e9, steps: 4},\n  year: {common: true, size: 3.154e10}\n};\nconst UNITS = (Object.keys(INTERVALS));\nfunction sorter(a, b) {\n  return a - b;\n}\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n  const adapter = scale._adapter;\n  const {parser, round, isoWeekday} = scale._parseOpts;\n  let value = input;\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n  if (!isNumberFinite(value)) {\n    value = typeof parser === 'string'\n      ? adapter.parse(value, parser)\n      : adapter.parse(value);\n  }\n  if (value === null) {\n    return null;\n  }\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\n      : adapter.startOf(value, round);\n  }\n  return +value;\n}\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n  return UNITS[ilen - 1];\n}\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {lo, hi} = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n  constructor(props) {\n    super(props);\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n    this._unit = 'day';\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n  init(scaleOpts, opts) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n    adapter.init(opts);\n    mergeIf(time.displayFormats, adapter.formats());\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n    super.init(scaleOpts);\n    this._normalized = opts.normalized;\n  }\n  parse(raw, index) {\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n    if (!minDefined || !maxDefined) {\n      _applyBounds(this._getLabelBounds());\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n    min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {min, max};\n  }\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n    const min = this.min;\n    const max = this.max;\n    const ticks = _filterBetween(timestamps, min, max);\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\n      : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n    if (options.reverse) {\n      ticks.reverse();\n    }\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n  afterAutoSkip() {\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n  initOffsets(timestamps) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\n  }\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(timeOpts.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n    return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);\n  }\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n    const label = this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    const formatter = options.ticks.callback;\n    return formatter ? callback(formatter, [label, index, ticks], this) : label;\n  }\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n    return {\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n    };\n  }\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const metas = this.getMatchingVisibleMetas();\n    if (this._normalized && metas.length) {\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\n    }\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n    return (this._cache.data = this.normalize(timestamps));\n  }\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\n  }\n  normalize(values) {\n    return _arrayUnique(values.sort(sorter));\n  }\n}\nTimeScale.id = 'time';\nTimeScale.defaults = {\n  bounds: 'data',\n  adapters: {},\n  time: {\n    parser: false,\n    unit: false,\n    round: false,\n    isoWeekday: false,\n    minUnit: 'millisecond',\n    displayFormats: {}\n  },\n  ticks: {\n    source: 'auto',\n    major: {\n      enabled: false\n    }\n  }\n};\n\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\n    }\n    ({pos: prevSource, time: prevTarget} = table[lo]);\n    ({pos: nextSource, time: nextTarget} = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({lo, hi} = _lookupByKey(table, 'time', val));\n    }\n    ({time: prevSource, pos: prevTarget} = table[lo]);\n    ({time: nextSource, pos: nextTarget} = table[hi]);\n  }\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n  constructor(props) {\n    super(props);\n    this._table = [];\n    this._minPos = undefined;\n    this._tableRange = undefined;\n  }\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n  buildLookupTable(timestamps) {\n    const {min, max} = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n    if (items.length < 2) {\n      return [\n        {time: min, pos: 0},\n        {time: max, pos: 1}\n      ];\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({time: curr, pos: i / (ilen - 1)});\n      }\n    }\n    return table;\n  }\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n    return timestamps;\n  }\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\nTimeSeriesScale.id = 'timeseries';\nTimeSeriesScale.defaults = TimeScale.defaults;\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n  controllers,\n  elements,\n  plugins,\n  scales,\n];\n\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, elements, layouts, plugins, registerables, registry, scales };\n"],"names":["Animator","constructor","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__","r","call","window","_update","Date","now","remaining","item","running","items","length","i","draw","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","animator","transparent","interpolators","boolean","from","to","factor","color","c0","c","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","a","_fn","_easing","e","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","d","animationOptions","Object","keys","animation","describe","_fallback","_indexable","_scriptable","name","colors","properties","numbers","resize","show","animations","visible","hide","v","Animations","config","_chart","_properties","configure","animatedProps","getOwnPropertyNames","key","option","b","_animateOptions","values","newOptions","options","resolveTargetOptions","$shared","assign","$animations","_createAnimations","awaitAll","anim","all","then","props","charAt","value","size","scaleClip","scale","allowedOverflow","opts","reverse","end","getSortedDatasetIndices","filterVisible","ilen","metasets","_getSortedDatasetMetas","index","applyStack","stack","dsIndex","datasetIndex","otherValue","singleMode","mode","g","s","isStacked","meta","stacked","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","stacks","_stacks","iScale","iAxis","axis","vAxis","indexScale","id","valueScale","itemStacks","getOrCreateStack","stackKey","indexValue","subStack","_top","_bottom","getFirstScaleId","scales","filter","shift","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","initialize","linkScales","addElements","updateIndex","dataset","getDataset","chooseId","x","y","xid","xAxisID","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","xScale","getScaleForId","yScale","rScale","data","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","u","_dataCheck","convertObjectDataToArray","adata","isExtensible","l","datasetElementType","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","f","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","otherMin","otherMax","getUserBounds","minDefined","maxDefined","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","t","_clip","clip","defaultClip","top","right","bottom","left","disabled","elements","area","chartArea","drawActiveElementsOnTop","element","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","parent","context","h","dataIndex","raw","_resolveElementOptions","dataElementType","elementType","cache","cacheKey","sharing","j","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","parseValue","entry","parseFloatBar","startValue","endValue","barStart","barEnd","abs","_custom","parseArrayOrPrimitive","isFloatBar","custom","parseEdge","edge","orig","startEnd","defaults","prototype","BarController","obj","iAxisKey","vAxisKey","bars","base","getBasePixel","horizontal","isHorizontal","ruler","_getRuler","vpixels","k","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","enableBorderRadius","center","height","width","setBorderSkipped","borderSkipped","setInflateAmount","inflateAmount","ratio","_getStacks","last","grouped","skipNull","val","isNaN","indexOf","_getStackCount","_getStackIndex","pixels","getPixelForValue","barThickness","computeMinSampleSize","curr","getAllScaleValues","_cache","$bar","visibleMetas","concat","_","sort","_length","updateMinAndPrev","ticks","getPixelForTick","_startPixel","_endPixel","stackCount","categoryPercentage","barPercentage","baseValue","minBarLength","actualBase","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","computeFlexCategoryTraits","next","percent","chunk","computeFitCategoryTraits","thickness","stackIndex","rects","overrides","_index_","offset","grid","_value_","beginAtZero","BubbleController","radius","points","point","iPixel","vPixel","skip","plugins","tooltip","title","DoughnutController","innerRadius","outerRadius","offsetX","offsetY","getter","_getRotation","rotation","_getCircumference","circumference","_getRotationExtents","T","isDatasetVisible","arcs","spacing","getMaxBorderWidth","getMaxOffset","maxSize","cutout","m","chartWeight","_getRingWeight","ratioX","ratioY","getRatioAndOffset","endAngle","startAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","p","calcMin","maxX","maxY","H","minX","P","minY","maxWidth","maxHeight","n","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","animateRotate","calculateCircumference","animationOpts","centerX","centerY","animateScale","arc","metaData","o","locale","borderAlign","borderWidth","hoverBorderWidth","hoverOffset","ringWeightOffset","weight","descriptors","aspectRatio","legend","generateLabels","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","lineWidth","onClick","legendItem","toggleDataVisibility","tooltipItem","dataLabel","formattedValue","slice","LineController","line","_dataset","animationsDisabled","q","w","_datasetIndex","_decimated","showLine","segment","animated","spanGaps","maxGapLength","directUpdate","prevParsed","nullData","border","updateControlPoints","PolarAreaController","bind","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","angleLines","display","circular","pointLabels","PieController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","fill","Element","tooltipPosition","useFinalPosition","getProps","hasValue","final","ret","defaultRoutes","formatters","numeric","tickValue","notation","delta","maxTick","numDecimal","z","minimumFractionDigits","maximumFractionDigits","format","logarithmic","pow","newTicks","majorStart","majorEnd","ceil","round","bounds","grace","drawBorder","drawOnChartArea","drawTicks","tickLength","tickWidth","tickColor","borderDash","borderDashOffset","padding","minRotation","maxRotation","mirror","textStrokeWidth","textStrokeColor","autoSkip","autoSkipPadding","labelOffset","callback","Ticks","minor","major","align","crossAlign","showLabelBackdrop","backdropColor","backdropPadding","route","startsWith","reverseAlign","offsetFromEdge","sample","numItems","result","increment","len","getTickMarkLength","getTitleHeight","fallback","font","O","K","lineHeight","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_maxLength","_longestTextCache","_reversePixels","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","init","setContext","suggestedMin","suggestedMax","B","metas","getPadding","getTicks","xLabels","yLabels","beforeLayout","beforeUpdate","C","margins","tickOpts","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","D","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","ticksLimit","maxTicksLimit","determineMaxTicks","_tickSize","majorIndices","enabled","getMajorIndices","numMajorIndices","first","skipMajors","calculateSpacing","evenMajorSpacing","getEvenSpacing","diff","factors","A","avgMajorSpacing","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","afterTickToLabelConversion","maxLabelDiagonal","numTicks","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","E","sqrt","F","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","labelWidth","_calculatePadding","_handleMargins","position","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","fullSize","_computeLabelSizes","jlen","tickFont","fontString","nestedLabel","caches","widths","heights","widestLabelSize","highestLabelSize","_resolveTickFontOptions","string","gc","G","Q","gcLen","valueAt","idx","getValueForPixel","pixel","decimal","I","J","getDecimalForPixel","getBaseValue","optionTicks","rot","_computeGridLineItems","borderValue","lineValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","ticksLength","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","positionAxisID","limit","step","optsAtIndex","lineColor","tickBorderDash","tickBorderDashOffset","getPixelForGridLine","offsetGridLines","validIndex","_computeLabelItems","textAlign","lineCount","textOffset","tickAndPadding","hTickAndPadding","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","backdrop","halfCount","strokeColor","strokeWidth","tickTextAlign","labelPadding","translation","_computeLabelArea","drawBackground","save","fillRect","restore","findIndex","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","lastLineWidth","drawLabels","L","M","N","drawTitle","titleX","titleY","titleArgs","S","R","_layers","tz","gz","getSortedVisibleDatasetMetas","axisID","_maxDigits","fontSize","TypedRegistry","scope","override","create","isForType","isPrototypeOf","register","parentScope","proto","getPrototypeOf","registerDefaults","itemDefaults","V","routeDefaults","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","unregister","U","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getElement","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","registry","component","camelMethod","W","ScatterController","interaction","__proto__","abstract","DateAdapter","chartOptions","formats","timestamp","amount","unit","startOf","weekday","endOf","members","adapters","_date","evaluateInteractionItems","handler","intersect","lo","hi","binarySearch","metaset","lookupMethod","Y","Z","el","getRange","getIntersectItems","includeInvisible","isPointInArea","$","inRange","getNearestItems","getNearestCartesianItems","distanceMetric","getDistanceMetricForAxis","useX","useY","pt1","pt2","minDistance","getCenterPoint","distance","a0","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","X","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","v1","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","fitBoxes","boxes","params","layout","refit","changed","refitBoxes","getMargins","positions","margin","same","other","updateDims","newWidth","outerWidth","newHeight","outerHeight","widthChanged","heightChanged","setBoxDims","placeBoxes","userPadding","placed","stackWeight","autoPadding","layouts","addBox","removeBox","layoutItem","minPadding","availableWidth","availableHeight","buildLayoutBoxes","layoutBoxes","wrapBoxes","wrap","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","verticalBoxes","horizontalBoxes","vBoxMaxWidth","hBoxMaxHeight","setLayoutDims","buildStacks","includes","_stack","handleMaxPadding","updatePos","change","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","eventListenerOptions","a5","passive","nodeListContains","nodeList","node","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","currentDevicePixelRatio","createResizeObserver","container","a2","a4","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","proxy","fromNativeEvent","native","addListener","DomPlatform","initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","a3","displayHeight","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","a1","isConnected","PluginService","_init","notify","hook","_createDescriptors","_descriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","localIds","local","createDescriptors","pluginOpts","pluginScopeKeys","scriptable","indexable","allKeys","previousDescriptors","some","getIndexAxis","datasetDefaults","datasetOptions","determineAxis","scaleOptions","toLowerCase","initOptions","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","firstIDs","scaleConf","console","error","_proxy","warn","defaultId","defaultScaleOptions","ac","defaultID","initData","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","a7","Array","chartOptionScopes","resolver","subPrefixes","getResolver","needContext","isScriptable","isIndexable","ab","a8","hasFunction","subResolver","a9","descriptorDefaults","resolverCache","aa","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","a6","getElementById","instances","getChart","Chart","userConfig","initialCanvas","existingChart","OffscreenCanvas","ad","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","ae","resizeDelay","_initialize","maintainAspectRatio","responsive","af","bindEvents","ag","_resizeBeforeDraw","_resize","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","hasUpdated","_updateMetasets","_destroyDatasetMeta","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","ah","unbindEvents","_getUniformDataChanges","moveNumericKeys","intKey","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getElementsAtEventForMode","setDatasetVisibility","_updateVisibility","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","detached","_remove","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","ai","replay","hoverOptions","hover","deactivated","activated","inChartArea","eventFilter","_handleEvent","lastEvent","_getActiveElements","isClick","aj","onHover","invalidatePlugins","clipArc","pixelMargin","angleMargin","closePath","rThetaToXY","theta","pathArc","innerR","spacingOffset","alpha","noSpacingOuterRadius","avNogSpacingRadius","noSpacingInnerRadius","beta","angleOffset","outerStart","outerEnd","innerStart","innerEnd","parseBorderRadius$1","angleDelta","borderRadius","al","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","pCenter","p4","PI","p8","outerStartX","outerStartY","outerEndX","outerEndY","defineProperties","enumerable","version","ArcElement","fullCircles","chartX","chartY","rAdjust","betweenAngles","withinRadius","ak","halfAngle","halfRadius","radiusOffset","translate","drawArc","borderJoinStyle","inner","lineJoin","drawFullCircleBorders","setStyle","lineCap","borderCapStyle","previous","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","pathSegment","lineMethod","stepped","as","tension","cubicInterpolationMode","at","fastPathSegment","prevX","lastY","avgX","countX","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","usePath2D","Path2D","LineElement","_path","_points","_segments","_pointsUpdated","am","segments","an","interpolate","ao","_interpolate","ap","aq","ar","interpolated","segmentMethod","path","strokePathDirect","inRange$1","hitRadius","capBezierPoints","PointElement","mouseX","mouseY","inXRange","inYRange","hoverRadius","au","getBarBounds","bar","half","skipOrLimit","skipX","skipY","addNormalRectPath","rect","inflateRect","refRect","BarElement","outer","boundingRects","parseBorderWidth","maxW","maxH","aw","parseBorderRadius","ax","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","addRectPath","hasRadius","av","cleanDecimatedDataset","defineProperty","cleanDecimatedData","_getBounds","az","_findSegmentEnd","_getEdge","_createBoundaryLine","boundary","_pointsFromSegments","linePoints","_shouldApplyFill","simpleArc","_drawfill","_getTarget","getLineByIndex","_buildStackLine","sourcePoints","linesBelow","getLinesBelow","below","unshift","addPointsBelow","sourcePoint","postponed","findPoint","pointValue","firstValue","lastValue","computeCircularBoundary","computeLinearBoundary","lineOpts","fillOption","above","doFill","clipVertical","clipY","lineLoop","firstPoint","lastPoint","src","tgt","tpoints","subBounds","fillSource","ay","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","heightLimit","totalWidth","currentColWidth","currentColHeight","col","adjustHitBoxes","rtl","rtlHelper","aA","hitbox","leftForLtr","_draw","cursor","defaultColor","fontColor","halfFontSize","drawLegendBox","lineDash","drawOptions","SQRT2","xPlus","aE","yBoxTop","xBoxLeft","fillText","strikethrough","aB","textDirection","textWidth","setWidth","aC","aD","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","onLeave","hoveredItem","sameItem","Title","_padding","textSize","_drawArgs","fontOpts","WeakMap","positioners","average","eventPosition","nearestElement","aG","tp","pushOrConcat","toPush","apply","splitNewlines","str","String","getTooltipSize","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","lines","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineAlignment","yAlign","determineYAlign","xAlign","determineXAlign","chartWidth","doesNotFitWithAlign","caret","caretSize","caretPadding","getBackgroundPoint","alignment","cornerRadius","paddingAndSize","alignX","alignY","getAlignedX","overrideCallbacks","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","tooltipItems","getTitle","beforeTitle","afterTitle","getBeforeBody","getBody","bodyItems","scoped","beforeLabel","afterLabel","getAfterBody","getFooter","beforeFooter","afterFooter","_createItems","createTooltipItem","itemSort","labelColor","labelPointStyle","labelTextColor","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleAlign","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","textColor","bodyAlign","bodyLineHeight","xLinePadding","fillLineOfText","bodyAlignForCalculation","bodyColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","plugin_tooltip","_element","afterInit","_args","afterDraw","afterEvent","aF","labelCount","Decimation","algorithm","beforeElementsUpdate","decimated","xAxis","getStartAndCountOfVisiblePointsSimplified","pointCount","threshold","configurable","lttbDecimation","maxAreaPoint","maxArea","nextA","samples","bucketWidth","sampledIndex","endIndex","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","minMaxDecimation","minIndex","maxIndex","startIndex","xMin","dx","xMax","lastIndex","intermediateIndex1","intermediateIndex2","Filler","afterDatasetsUpdate","sources","_decodeFill","firstCh","parseFillOption","parseFloat","$filler","_resolveTarget","propagate","visited","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","ci","SubTitle","createTitle","titleBlock","addIfString","addedLabels","CategoryScale","_startValue","_valueRange","_addedLabels","added","isFinite","findOrAddLabel","lastIndexOf","relativeLabelSize","minSpacing","rad","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","getTickLimit","maxTicks","stepSize","computeTickLimit","generateTicks$1","generationOptions","dataRange","niceMin","niceMax","numSpaces","precision","maxDigits","includeBounds","maxSpaces","rmin","rmax","countDefined","aI","aJ","aK","decimalPlaces","aL","aH","LinearScale","isMajor","tickVal","LogarithmicScale","_zero","exp","generateTicks","endExp","endSignificand","significand","getTickBackdropHeight","determineLimits","pathRadiusLine","getPointPosition","RadialLinearScale","drawingArea","_pointLabels","_pointLabelItems","fitWithPointLabels","limits","valueCount","pointLabelOpts","additionalAngle","centerPointLabels","getPointLabelContext","plFont","aM","updateLimits","hLimits","vLimits","setCenterPoint","buildPointLabelItems","extra","outerDistance","pointLabelPosition","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","drawPointLabels","backdropLeft","backdropTop","backdropWidth","backdropHeight","drawRadiusLine","gridLineOpts","rotate","animate","INTERVALS","millisecond","common","steps","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","addTick","time","timestamps","aO","ticksFromTimestamps","majorUnit","setMajorTicks","TimeScale","_unit","_majorUnit","_offsets","_normalized","displayFormats","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","aN","_getLabelCapacity","determineUnitForFormatting","determineMajorUnit","initOffsets","offsetAfterAutoskip","getDecimalForValue","hasWeekday","getDataTimestamps","tooltipFormat","datetime","_tickFormatFunction","minorFormat","majorFormat","formatter","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","registerables"],"sourceRoot":""}