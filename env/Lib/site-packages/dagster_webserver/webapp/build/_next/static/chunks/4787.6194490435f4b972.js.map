{"version":3,"file":"static/chunks/4787.6194490435f4b972.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/instance/InstanceHealthPage.tsx","webpack://_N_E/../ui-core/src/nav/InstanceWarningIcon.tsx","webpack://_N_E/../ui-core/src/nav/WorkspaceStatus.tsx","webpack://_N_E/../ui-core/src/instance/InstanceTabs.tsx","webpack://_N_E/../ui-core/src/instance/useCanSeeConfig.tsx"],"sourcesContent":["import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, Heading, PageHeader, Subheading} from '@dagster-io/ui-components';\nimport {useContext} from 'react';\n\nimport {DaemonList} from './DaemonList';\nimport {INSTANCE_HEALTH_FRAGMENT} from './InstanceHealthFragment';\nimport {InstancePageContext} from './InstancePageContext';\nimport {InstanceTabs} from './InstanceTabs';\nimport {InstanceHealthQuery, InstanceHealthQueryVariables} from './types/InstanceHealthPage.types';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useBlockTraceOnQueryResult} from '../performance/TraceContext';\n\nexport const InstanceHealthPageContent = () => {\n  useTrackPageView();\n  useDocumentTitle('Daemons');\n\n  const queryData = useQuery<InstanceHealthQuery, InstanceHealthQueryVariables>(\n    INSTANCE_HEALTH_QUERY,\n    {\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  useBlockTraceOnQueryResult(queryData, 'InstanceHealthQuery');\n  const refreshState = useQueryRefreshAtInterval(queryData, FIFTEEN_SECONDS);\n  const {loading, data} = queryData;\n\n  const daemonContent = () => {\n    if (loading && !data?.instance) {\n      return (\n        <Box padding={{horizontal: 24}} style={{color: Colors.textLight()}}>\n          Loadingâ€¦\n        </Box>\n      );\n    }\n    return data?.instance ? (\n      <DaemonList daemonStatuses={data.instance.daemonHealth.allDaemonStatuses} />\n    ) : null;\n  };\n\n  return (\n    <div style={{overflowY: 'auto'}}>\n      <Box\n        padding={{vertical: 16, horizontal: 24}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Subheading>Daemon statuses</Subheading>\n        <div>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </div>\n      </Box>\n      {daemonContent()}\n    </div>\n  );\n};\n\nexport const InstanceHealthPage = () => {\n  const {pageTitle} = useContext(InstancePageContext);\n  return (\n    <>\n      <PageHeader title={<Heading>{pageTitle}</Heading>} tabs={<InstanceTabs tab=\"health\" />} />\n      <InstanceHealthPageContent />\n    </>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default InstanceHealthPage;\n\nconst INSTANCE_HEALTH_QUERY = gql`\n  query InstanceHealthQuery {\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n","import {Colors, Icon} from '@dagster-io/ui-components';\nimport {memo, useContext} from 'react';\n\nimport {WarningTooltip} from './WarningTooltip';\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nexport const InstanceWarningIcon = memo(() => {\n  const {daemons} = useContext(DeploymentStatusContext);\n\n  if (!daemons) {\n    return null;\n  }\n\n  return (\n    <WarningTooltip\n      content={daemons.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.accentYellow()} />\n    </WarningTooltip>\n  );\n});\n","import {Colors, Icon, Spinner, Tooltip} from '@dagster-io/ui-components';\nimport {memo, useContext} from 'react';\n\nimport {WarningTooltip} from './WarningTooltip';\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nexport const WorkspaceStatus = memo(({placeholder}: {placeholder: boolean}) => {\n  const {codeLocations} = useContext(DeploymentStatusContext);\n\n  if (!codeLocations) {\n    return placeholder ? <div style={{width: '16px'}} /> : null;\n  }\n\n  if (codeLocations.type === 'spinner') {\n    return (\n      <Tooltip content={codeLocations.content} placement=\"bottom\">\n        <Spinner purpose=\"body-text\" fillColor={Colors.accentGray()} />\n      </Tooltip>\n    );\n  }\n\n  return (\n    <WarningTooltip\n      content={codeLocations.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.accentYellow()} />\n    </WarningTooltip>\n  );\n});\n","import {QueryResult} from '@apollo/client';\nimport {Box, Tabs} from '@dagster-io/ui-components';\nimport {useContext} from 'react';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {useCanSeeConfig} from './useCanSeeConfig';\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {InstanceWarningIcon} from '../nav/InstanceWarningIcon';\nimport {WorkspaceStatus} from '../nav/WorkspaceStatus';\nimport {TabLink} from '../ui/TabLink';\n\ninterface Props<TData> {\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const InstanceTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  const {healthTitle} = useContext(InstancePageContext);\n  const canSeeConfig = useCanSeeConfig();\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink\n          id=\"locations\"\n          title=\"Code locations\"\n          to=\"/locations\"\n          icon={<WorkspaceStatus placeholder={false} />}\n        />\n        <TabLink id=\"health\" title={healthTitle} to=\"/health\" icon={<InstanceWarningIcon />} />\n        {canSeeConfig ? (\n          <TabLink id=\"concurrency\" title=\"Concurrency limits\" to=\"/concurrency\" />\n        ) : null}\n        {canSeeConfig ? <TabLink id=\"config\" title=\"Configuration\" to=\"/config\" /> : null}\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\n\nimport {\n  InstanceConfigHasInfoQuery,\n  InstanceConfigHasInfoQueryVariables,\n} from './types/useCanSeeConfig.types';\nimport {useBlockTraceOnQueryResult} from '../performance/TraceContext';\n\nexport const useCanSeeConfig = () => {\n  const queryResult = useQuery<InstanceConfigHasInfoQuery, InstanceConfigHasInfoQueryVariables>(\n    INSTANCE_CONFIG_HAS_INFO,\n  );\n  useBlockTraceOnQueryResult(queryResult, 'InstanceConfigHasInfoQuery');\n  return !!queryResult.data?.instance.hasInfo;\n};\n\nconst INSTANCE_CONFIG_HAS_INFO = gql`\n  query InstanceConfigHasInfo {\n    instance {\n      id\n      hasInfo\n    }\n  }\n`;\n"],"names":["InstanceHealthPageContent","useTrackPageView","useDocumentTitle","queryData","useQuery","INSTANCE_HEALTH_QUERY","notifyOnNetworkStatusChange","useBlockTraceOnQueryResult","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","loading","data","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","jsxs","div","style","overflowY","Box","padding","vertical","horizontal","flex","direction","alignItems","justifyContent","jsx","Subheading","QueryRefreshCountdown","instance","DaemonList","daemonStatuses","daemonHealth","allDaemonStatuses","color","Colors","InstanceHealthPage","pageTitle","useContext","InstancePageContext","Fragment","PageHeader","title","Heading","tabs","InstanceTabs","tab","__webpack_exports__","gql","INSTANCE_HEALTH_FRAGMENT","InstanceWarningIcon","memo","daemons","DeploymentStatusContext","jsx_runtime","WarningTooltip","content","position","modifiers","offset","enabled","options","Icon","name","WorkspaceStatus","placeholder","param","codeLocations","type","Tooltip","placement","Spinner","purpose","fillColor","width","props","healthTitle","canSeeConfig","useCanSeeConfig","Tabs","selectedTabId","TabLink","id","to","icon","bottom","queryResult","INSTANCE_CONFIG_HAS_INFO","hasInfo"],"sourceRoot":""}