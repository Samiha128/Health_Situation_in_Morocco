{"version":3,"file":"static/chunks/3917.59c146eef840befd.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/hooks/useFavicon.tsx","webpack://_N_E/../ui-core/src/runs/Run.tsx","webpack://_N_E/../ui-core/src/runs/RunAssetTags.tsx","webpack://_N_E/../ui-core/src/runs/RunHeaderActions.tsx","webpack://_N_E/../ui-core/src/runs/RunRootTrace.tsx","webpack://_N_E/../ui-core/src/runs/RunTimingTags.tsx","webpack://_N_E/../ui-core/src/runs/TickTagForRun.tsx","webpack://_N_E/../ui-core/src/assets/AutomaterializeTagWithEvaluation.tsx","webpack://_N_E/../ui-core/src/runs/RunRoot.tsx"],"sourcesContent":["import {useEffect} from 'react';\n\nexport const useFavicon = (href: string) => {\n  useEffect(() => {\n    const el = document.querySelector('link[rel=\"icon\"][type=\"image/svg+xml\"]');\n    if (!el) {\n      return;\n    }\n    const previousHref = el.getAttribute('href');\n    el.setAttribute('href', href);\n    return () => {\n      if (previousHref) {\n        el.setAttribute('href', previousHref);\n      }\n    };\n  }, [href]);\n};\n","import {\n  Box,\n  Button,\n  Colors,\n  ErrorBoundary,\n  Icon,\n  NonIdealState,\n  SplitPanelContainer,\n  SplitPanelContainerHandle,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {memo} from 'react';\nimport styled from 'styled-components';\n\nimport {CapturedOrExternalLogPanel} from './CapturedLogPanel';\nimport {ComputeLogPanel} from './ComputeLogPanel';\nimport {LogFilter, LogsProvider, LogsProviderLogs} from './LogsProvider';\nimport {LogsScrollingTable} from './LogsScrollingTable';\nimport {LogType, LogsToolbar} from './LogsToolbar';\nimport {RunActionButtons} from './RunActionButtons';\nimport {RunContext} from './RunContext';\nimport {IRunMetadataDict, RunMetadataProvider} from './RunMetadataProvider';\nimport {RunRootTrace} from './RunRootTrace';\nimport {RunDagsterRunEventFragment, RunPageFragment} from './types/RunFragments.types';\nimport {\n  matchingComputeLogKeyFromStepKey,\n  useComputeLogFileKeyForSelection,\n} from './useComputeLogFileKeyForSelection';\nimport {useQueryPersistedLogFilter} from './useQueryPersistedLogFilter';\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {filterByQuery} from '../app/GraphQueryImpl';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {GanttChart, GanttChartLoadingState, GanttChartMode, QueuedState} from '../gantt/GanttChart';\nimport {toGraphQueryItems} from '../gantt/toGraphQueryItems';\nimport {RunStatus} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useFavicon} from '../hooks/useFavicon';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSupportsCapturedLogs} from '../instance/useSupportsCapturedLogs';\nimport {CompletionType, useTraceDependency} from '../performance/TraceContext';\n\ninterface RunProps {\n  runId: string;\n  run?: RunPageFragment;\n  trace: RunRootTrace;\n}\n\nconst runStatusFavicon = (status: RunStatus) => {\n  switch (status) {\n    case RunStatus.FAILURE:\n      return '/favicon-run-failed.svg';\n    case RunStatus.SUCCESS:\n      return '/favicon-run-success.svg';\n    case RunStatus.STARTING:\n    case RunStatus.STARTED:\n    case RunStatus.CANCELING:\n      return '/favicon-run-pending.svg';\n    default:\n      return '/favicon.svg';\n  }\n};\n\nexport const Run = memo((props: RunProps) => {\n  const {run, runId, trace} = props;\n  const [logsFilter, setLogsFilter] = useQueryPersistedLogFilter();\n  const [selectionQuery, setSelectionQuery] = useQueryPersistedState<string>({\n    queryKey: 'selection',\n    defaults: {selection: ''},\n  });\n\n  useFavicon(run ? runStatusFavicon(run.status) : '/favicon.svg');\n  useDocumentTitle(\n    run\n      ? `${!isHiddenAssetGroupJob(run.pipelineName) ? run.pipelineName : ''} ${runId.slice(\n          0,\n          8,\n        )} [${run.status}]`\n      : `Run: ${runId}`,\n  );\n\n  const onShowStateDetails = (stepKey: string, logs: RunDagsterRunEventFragment[]) => {\n    const errorNode = logs.find(\n      (node) => node.__typename === 'ExecutionStepFailureEvent' && node.stepKey === stepKey,\n    );\n\n    if (errorNode) {\n      showCustomAlert({\n        body: <PythonErrorInfo error={errorNode} />,\n      });\n    }\n  };\n\n  const onSetSelectionQuery = (query: string) => {\n    setSelectionQuery(query);\n    setLogsFilter({\n      ...logsFilter,\n      logQuery: query !== '*' ? [{token: 'query', value: query}] : [],\n    });\n  };\n\n  const logsDependency = useTraceDependency('RunLogs');\n\n  return (\n    <RunContext.Provider value={run}>\n      <LogsProvider key={runId} runId={runId}>\n        {(logs) => (\n          <>\n            <OnLogsLoaded trace={trace} dependency={logsDependency} />\n            <RunMetadataProvider logs={logs}>\n              {(metadata) => (\n                <RunWithData\n                  run={run}\n                  runId={runId}\n                  logs={logs}\n                  logsFilter={logsFilter}\n                  metadata={metadata}\n                  selectionQuery={selectionQuery}\n                  onSetLogsFilter={setLogsFilter}\n                  onSetSelectionQuery={onSetSelectionQuery}\n                  onShowStateDetails={onShowStateDetails}\n                />\n              )}\n            </RunMetadataProvider>\n          </>\n        )}\n      </LogsProvider>\n    </RunContext.Provider>\n  );\n});\n\nconst OnLogsLoaded = ({\n  trace,\n  dependency,\n}: {\n  trace: RunRootTrace;\n  dependency: ReturnType<typeof useTraceDependency>;\n}) => {\n  React.useLayoutEffect(() => {\n    trace.onLogsLoaded();\n    dependency.completeDependency(CompletionType.SUCCESS);\n  }, [dependency, trace]);\n  return null;\n};\n\ninterface RunWithDataProps {\n  run?: RunPageFragment;\n  runId: string;\n  selectionQuery: string;\n  logs: LogsProviderLogs;\n  logsFilter: LogFilter;\n  metadata: IRunMetadataDict;\n  onSetLogsFilter: (v: LogFilter) => void;\n  onSetSelectionQuery: (query: string) => void;\n  onShowStateDetails: (stepKey: string, logs: RunDagsterRunEventFragment[]) => void;\n}\n\nconst logTypeFromQuery = (queryLogType: string) => {\n  switch (queryLogType) {\n    case 'stdout':\n      return LogType.stdout;\n    case 'stderr':\n      return LogType.stderr;\n    default:\n      return LogType.structured;\n  }\n};\n\n/**\n * Note: There are two places we keep a \"step query string\" in the Run view:\n * selectionQuery and logsFilter.logsQuery.\n *\n * - selectionQuery is set when you click around in the Gannt view and is the\n *   selection used for re-execution, etc. When set, we autofill logsFilter.logsQuery.\n *\n * - logsFilter.logsQuery is used for filtering the logs. It can be cleared separately\n *   from the selectionQuery, so you can select a step but navigate elsewhere in the logs.\n *\n * We could revisit this in the future but I believe we iterated quite a bit to get to this\n * solution and we should avoid locking the two filter inputs together completely.\n */\nconst RunWithData = ({\n  run,\n  runId,\n  logs,\n  logsFilter,\n  metadata,\n  selectionQuery,\n  onSetLogsFilter,\n  onSetSelectionQuery,\n}: RunWithDataProps) => {\n  const [queryLogType, setQueryLogType] = useQueryPersistedState<string>({\n    queryKey: 'logType',\n    defaults: {logType: LogType.structured},\n  });\n\n  const logType = logTypeFromQuery(queryLogType);\n  const setLogType = (lt: LogType) => setQueryLogType(LogType[lt]);\n  const [computeLogUrl, setComputeLogUrl] = React.useState<string | null>(null);\n\n  const stepKeysJSON = JSON.stringify(Object.keys(metadata.steps).sort());\n  const stepKeys = React.useMemo(() => JSON.parse(stepKeysJSON), [stepKeysJSON]);\n\n  const runtimeGraph = run?.executionPlan && toGraphQueryItems(run?.executionPlan, metadata.steps);\n\n  const selectionStepKeys = React.useMemo(() => {\n    return runtimeGraph && selectionQuery && selectionQuery !== '*'\n      ? filterByQuery(runtimeGraph, selectionQuery).all.map((n) => n.name)\n      : [];\n  }, [runtimeGraph, selectionQuery]);\n\n  const supportsCapturedLogs = useSupportsCapturedLogs();\n  const {logCaptureInfo, computeLogFileKey, setComputeLogFileKey} =\n    useComputeLogFileKeyForSelection({\n      stepKeys,\n      selectionStepKeys,\n      metadata,\n      defaultToFirstStep: false,\n    });\n\n  const logsFilterStepKeys = runtimeGraph\n    ? logsFilter.logQuery\n        .filter((v) => v.token && v.token === 'query')\n        .reduce((accum, v) => {\n          accum.push(...filterByQuery(runtimeGraph, v.value).all.map((n) => n.name));\n          return accum;\n        }, [] as string[])\n    : [];\n\n  const onClickStep = (stepKey: string, evt: React.MouseEvent<any>) => {\n    const index = selectionStepKeys.indexOf(stepKey);\n    let newSelected: string[];\n    const filterForExactStep = `\"${stepKey}\"`;\n    if (evt.shiftKey) {\n      // shift-click to multi select steps, preserving quotations if present\n      newSelected = [\n        ...selectionStepKeys.map((k) => (selectionQuery.includes(`\"${k}\"`) ? `\"${k}\"` : k)),\n      ];\n\n      if (index !== -1) {\n        // deselect the step if already selected\n        newSelected.splice(index, 1);\n      } else {\n        // select the step otherwise\n        newSelected.push(filterForExactStep);\n      }\n    } else {\n      if (selectionStepKeys.length === 1 && index !== -1) {\n        // deselect the step if already selected\n        newSelected = [];\n      } else {\n        // select the step otherwise\n        newSelected = [filterForExactStep];\n\n        // When only one step is selected, set the compute log key as well.\n        const matchingLogKey = matchingComputeLogKeyFromStepKey(metadata.logCaptureSteps, stepKey);\n        matchingLogKey && setComputeLogFileKey(matchingLogKey);\n      }\n    }\n\n    onSetSelectionQuery(newSelected.join(', ') || '*');\n  };\n\n  const [expandedPanel, setExpandedPanel] = React.useState<null | 'top' | 'bottom'>(null);\n  const containerRef = React.useRef<SplitPanelContainerHandle>(null);\n\n  React.useEffect(() => {\n    if (containerRef.current) {\n      const size = containerRef.current.getSize();\n      if (size === 100) {\n        setExpandedPanel('top');\n      } else if (size === 0) {\n        setExpandedPanel('bottom');\n      }\n    }\n  }, []);\n\n  const isTopExpanded = expandedPanel === 'top';\n  const isBottomExpanded = expandedPanel === 'bottom';\n\n  const expandBottomPanel = () => {\n    containerRef.current?.changeSize(0);\n    setExpandedPanel('bottom');\n  };\n  const expandTopPanel = () => {\n    containerRef.current?.changeSize(100);\n    setExpandedPanel('top');\n  };\n  const resetPanels = () => {\n    containerRef.current?.changeSize(50);\n    setExpandedPanel(null);\n  };\n\n  const gantt = (metadata: IRunMetadataDict) => {\n    if (!run) {\n      return <GanttChartLoadingState runId={runId} />;\n    }\n\n    if (run.status === 'QUEUED') {\n      return <QueuedState run={run} />;\n    }\n\n    if (run.executionPlan && runtimeGraph) {\n      return (\n        <ErrorBoundary region=\"gantt chart\">\n          <GanttChart\n            options={{\n              mode: GanttChartMode.WATERFALL_TIMED,\n            }}\n            toolbarActions={\n              <Box flex={{direction: 'row', alignItems: 'center', gap: 12}}>\n                <Tooltip content={isTopExpanded ? 'Collapse' : 'Expand'}>\n                  <Button\n                    icon={<Icon name={isTopExpanded ? 'collapse_arrows' : 'expand_arrows'} />}\n                    onClick={isTopExpanded ? resetPanels : expandTopPanel}\n                  />\n                </Tooltip>\n                <RunActionButtons\n                  run={run}\n                  graph={runtimeGraph}\n                  metadata={metadata}\n                  selection={{query: selectionQuery, keys: selectionStepKeys}}\n                />\n              </Box>\n            }\n            runId={runId}\n            graph={runtimeGraph}\n            metadata={metadata}\n            selection={{query: selectionQuery, keys: selectionStepKeys}}\n            onClickStep={onClickStep}\n            onSetSelection={onSetSelectionQuery}\n            focusedTime={logsFilter.focusedTime}\n          />\n        </ErrorBoundary>\n      );\n    }\n\n    return <NonIdealState icon=\"error\" title=\"Unable to build execution plan\" />;\n  };\n\n  return (\n    <>\n      <SplitPanelContainer\n        ref={containerRef}\n        axis=\"vertical\"\n        identifier=\"run-gantt\"\n        firstInitialPercent={35}\n        firstMinSize={56}\n        first={gantt(metadata)}\n        secondMinSize={56}\n        second={\n          <ErrorBoundary region=\"logs\">\n            <LogsContainer>\n              <LogsToolbar\n                logType={logType}\n                onSetLogType={setLogType}\n                filter={logsFilter}\n                onSetFilter={onSetLogsFilter}\n                steps={stepKeys}\n                metadata={metadata}\n                computeLogFileKey={computeLogFileKey}\n                onSetComputeLogKey={setComputeLogFileKey}\n                computeLogUrl={computeLogUrl}\n                counts={logs.counts}\n                isSectionExpanded={isBottomExpanded}\n                toggleExpanded={isBottomExpanded ? resetPanels : expandBottomPanel}\n              />\n              {logType !== LogType.structured ? (\n                !computeLogFileKey ? (\n                  <NoStepSelectionState type={logType} />\n                ) : supportsCapturedLogs ? (\n                  <CapturedOrExternalLogPanel\n                    logKey={computeLogFileKey ? [runId, 'compute_logs', computeLogFileKey] : []}\n                    logCaptureInfo={logCaptureInfo}\n                    visibleIOType={LogType[logType]}\n                    onSetDownloadUrl={setComputeLogUrl}\n                  />\n                ) : (\n                  <ComputeLogPanel\n                    runId={runId}\n                    computeLogFileKey={stepKeys.length ? computeLogFileKey : undefined}\n                    ioType={LogType[logType]}\n                    setComputeLogUrl={setComputeLogUrl}\n                  />\n                )\n              ) : (\n                <LogsScrollingTable\n                  logs={logs}\n                  filter={logsFilter}\n                  filterStepKeys={logsFilterStepKeys}\n                  filterKey={`${JSON.stringify(logsFilter)}`}\n                  metadata={metadata}\n                />\n              )}\n            </LogsContainer>\n          </ErrorBoundary>\n        }\n      />\n    </>\n  );\n};\n\nconst LogsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst NoStepSelectionState = ({type}: {type: LogType}) => {\n  return (\n    <Box\n      flex={{\n        direction: 'row',\n        grow: 1,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n      style={{background: Colors.backgroundDefault()}}\n    >\n      <NonIdealState\n        title={`Select a step to view ${type}`}\n        icon=\"warning\"\n        description=\"Select a step on the Gantt chart or from the dropdown above to view logs.\"\n      />\n    </Box>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\n\nimport {AssetKeyTagCollection} from './AssetTagCollections';\nimport {RunAssetsQuery, RunAssetsQueryVariables} from './types/RunAssetTags.types';\nimport {RunFragment} from './types/RunFragments.types';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {useBlockTraceOnQueryResult} from '../performance/TraceContext';\n\nexport const RunAssetTags = (props: {run: RunFragment}) => {\n  const {run} = props;\n  const skip = isHiddenAssetGroupJob(run.pipelineName);\n  const queryResult = useQuery<RunAssetsQuery, RunAssetsQueryVariables>(RUN_ASSETS_QUERY, {\n    variables: {runId: run.id},\n    skip,\n  });\n  const {data, loading} = queryResult;\n  useBlockTraceOnQueryResult(queryResult, 'RunAssetsQuery', {skip});\n\n  if (loading || !data || data.pipelineRunOrError.__typename !== 'Run') {\n    return null;\n  }\n\n  return (\n    <AssetKeyTagCollection useTags assetKeys={data.pipelineRunOrError.assets.map((a) => a.key)} />\n  );\n};\n\nconst RUN_ASSETS_QUERY = gql`\n  query RunAssetsQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        assets {\n          id\n          key {\n            path\n          }\n        }\n      }\n    }\n  }\n`;\n","import {useMutation} from '@apollo/client';\nimport {Button, Group, Icon, Menu, MenuItem, Popover, Tooltip} from '@dagster-io/ui-components';\nimport {useContext, useState} from 'react';\nimport {useHistory} from 'react-router-dom';\n\nimport {DeletionDialog} from './DeletionDialog';\nimport {RunConfigDialog} from './RunConfigDialog';\nimport {doneStatuses} from './RunStatuses';\nimport {DagsterTag} from './RunTag';\nimport {RunsQueryRefetchContext} from './RunUtils';\nimport {TerminationDialog} from './TerminationDialog';\nimport {RunFragment} from './types/RunFragments.types';\nimport {AppContext} from '../app/AppContext';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {InjectedComponentContext} from '../app/InjectedComponentContext';\nimport {useCopyToClipboard} from '../app/browser';\nimport {FREE_CONCURRENCY_SLOTS_MUTATION} from '../instance/InstanceConcurrency';\nimport {\n  FreeConcurrencySlotsMutation,\n  FreeConcurrencySlotsMutationVariables,\n} from '../instance/types/InstanceConcurrency.types';\nimport {AnchorButton} from '../ui/AnchorButton';\nimport {workspacePipelineLinkForRun, workspacePipelinePath} from '../workspace/workspacePath';\n\ntype VisibleDialog = 'config' | 'delete' | 'terminate' | 'free_slots' | 'metrics' | null;\n\nexport const RunHeaderActions = ({run, isJob}: {run: RunFragment; isJob: boolean}) => {\n  const {runConfigYaml} = run;\n  const runMetricsEnabled = run.tags.some((t) => t.key === DagsterTag.RunMetrics);\n\n  const [visibleDialog, setVisibleDialog] = useState<VisibleDialog>(null);\n\n  const {rootServerURI} = useContext(AppContext);\n  const {refetch} = useContext(RunsQueryRefetchContext);\n  const {RunMetricsDialog} = useContext(InjectedComponentContext);\n\n  const copy = useCopyToClipboard();\n  const history = useHistory();\n\n  const [freeSlots] = useMutation<\n    FreeConcurrencySlotsMutation,\n    FreeConcurrencySlotsMutationVariables\n  >(FREE_CONCURRENCY_SLOTS_MUTATION);\n\n  const copyConfig = async () => {\n    copy(runConfigYaml);\n    await showSharedToaster({\n      intent: 'success',\n      icon: 'copy_to_clipboard_done',\n      message: 'Copied!',\n    });\n  };\n\n  const freeConcurrencySlots = async () => {\n    const resp = await freeSlots({variables: {runId: run.id}});\n    if (resp.data?.freeConcurrencySlots) {\n      await showSharedToaster({\n        intent: 'success',\n        icon: 'check_circle',\n        message: 'Freed concurrency slots',\n      });\n    }\n  };\n\n  const jobLink = workspacePipelineLinkForRun({\n    repositoryName: run.repositoryOrigin?.repositoryName,\n    repositoryLocationName: run.repositoryOrigin?.repositoryLocationName,\n    run,\n    isJob,\n  });\n\n  return (\n    <div>\n      <Group direction=\"row\" spacing={8}>\n        {jobLink.disabledReason ? (\n          <Tooltip content={jobLink.disabledReason} useDisabledButtonTooltipFix>\n            <Button icon={<Icon name={jobLink.icon} />} disabled>\n              {jobLink.label}\n            </Button>\n          </Tooltip>\n        ) : (\n          <AnchorButton icon={<Icon name={jobLink.icon} />} to={jobLink.to}>\n            {jobLink.label}\n          </AnchorButton>\n        )}\n        <Button icon={<Icon name=\"tag\" />} onClick={() => setVisibleDialog('config')}>\n          View tags and config\n        </Button>\n        <Popover\n          position=\"bottom-right\"\n          content={\n            <Menu>\n              <Tooltip\n                content=\"Loadable in dagster-webserver-debug\"\n                position=\"left\"\n                targetTagName=\"div\"\n              >\n                <MenuItem\n                  text=\"Download debug file\"\n                  icon=\"download_for_offline\"\n                  onClick={() => window.open(`${rootServerURI}/download_debug/${run.id}`)}\n                />\n              </Tooltip>\n              {runMetricsEnabled && RunMetricsDialog ? (\n                <MenuItem\n                  tagName=\"button\"\n                  icon=\"asset_plot\"\n                  text=\"View container metrics\"\n                  intent=\"none\"\n                  onClick={() => setVisibleDialog('metrics')}\n                />\n              ) : null}\n              {run.hasConcurrencyKeySlots && doneStatuses.has(run.status) ? (\n                <MenuItem\n                  text=\"Free concurrency slots\"\n                  icon=\"lock\"\n                  onClick={freeConcurrencySlots}\n                />\n              ) : null}\n              {run.hasDeletePermission ? (\n                <MenuItem\n                  icon=\"delete\"\n                  text=\"Delete\"\n                  intent=\"danger\"\n                  onClick={() => setVisibleDialog('delete')}\n                />\n              ) : null}\n            </Menu>\n          }\n        >\n          <Button icon={<Icon name=\"expand_more\" />} />\n        </Popover>\n      </Group>\n      <RunConfigDialog\n        isOpen={visibleDialog === 'config'}\n        onClose={() => setVisibleDialog(null)}\n        copyConfig={() => copyConfig()}\n        mode={run.mode}\n        runConfigYaml={run.runConfigYaml}\n        tags={run.tags}\n        isJob={isJob}\n      />\n      {runMetricsEnabled && RunMetricsDialog ? (\n        <RunMetricsDialog\n          runId={run.id}\n          isOpen={visibleDialog === 'metrics'}\n          onClose={() => setVisibleDialog(null)}\n        />\n      ) : null}\n      {run.hasDeletePermission ? (\n        <DeletionDialog\n          isOpen={visibleDialog === 'delete'}\n          onClose={() => setVisibleDialog(null)}\n          onComplete={() => {\n            if (run.repositoryOrigin) {\n              history.push(\n                workspacePipelinePath({\n                  repoName: run.repositoryOrigin.repositoryName,\n                  repoLocation: run.repositoryOrigin.repositoryLocationName,\n                  pipelineName: run.pipelineName,\n                  isJob,\n                  path: '/runs',\n                }),\n              );\n            } else {\n              setVisibleDialog(null);\n            }\n          }}\n          onTerminateInstead={() => setVisibleDialog('terminate')}\n          selectedRuns={{[run.id]: run.canTerminate}}\n        />\n      ) : null}\n      {run.hasTerminatePermission ? (\n        <TerminationDialog\n          isOpen={visibleDialog === 'terminate'}\n          onClose={() => setVisibleDialog(null)}\n          onComplete={() => {\n            refetch();\n          }}\n          selectedRuns={{[run.id]: run.canTerminate}}\n        />\n      ) : null}\n    </div>\n  );\n};\n","import {useMemo} from 'react';\n\nimport {usePageLoadTrace} from '../performance';\n\nexport const useRunRootTrace = () => {\n  const trace = usePageLoadTrace('RunRoot');\n  return useMemo(() => {\n    let logsLoaded = false;\n    let runsLoaded = false;\n    function onLoaded() {\n      if (logsLoaded && runsLoaded) {\n        trace.endTrace();\n      }\n    }\n    return {\n      onLogsLoaded() {\n        logsLoaded = true;\n        onLoaded();\n      },\n      onRunLoaded() {\n        runsLoaded = true;\n        onLoaded();\n      },\n    };\n  }, [trace]);\n};\n\nexport type RunRootTrace = ReturnType<typeof useRunRootTrace>;\n","import {Box, Popover, Tag} from '@dagster-io/ui-components';\n\nimport {RunTimingDetails} from './RunTimingDetails';\nimport {RunTimingFragment} from './types/RunTimingDetails.types';\nimport {formatElapsedTimeWithoutMsec} from '../app/Util';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\n\nexport const RunTimingTags = ({loading, run}: {loading: boolean; run: RunTimingFragment}) => {\n  return (\n    <>\n      {run?.startTime ? (\n        <Popover\n          interactionKind=\"hover\"\n          placement=\"bottom\"\n          content={\n            <Box padding={16}>\n              <RunTimingDetails run={run} loading={loading} />\n            </Box>\n          }\n        >\n          <Tag icon=\"schedule\">\n            <TimestampDisplay\n              timestamp={run.startTime}\n              timeFormat={{showSeconds: true, showTimezone: false}}\n            />\n          </Tag>\n        </Popover>\n      ) : run.updateTime ? (\n        <Tag icon=\"schedule\">\n          <TimestampDisplay\n            timestamp={run.updateTime}\n            timeFormat={{showSeconds: true, showTimezone: false}}\n          />\n        </Tag>\n      ) : undefined}\n      {run?.startTime && run?.endTime ? (\n        <Popover\n          interactionKind=\"hover\"\n          placement=\"bottom\"\n          content={\n            <Box padding={16}>\n              <RunTimingDetails run={run} loading={loading} />\n            </Box>\n          }\n        >\n          <Tag icon=\"timer\">\n            <span style={{fontVariantNumeric: 'tabular-nums'}}>\n              {run?.startTime\n                ? formatElapsedTimeWithoutMsec(\n                    (run?.endTime * 1000 || Date.now()) - run?.startTime * 1000,\n                  )\n                : '–'}\n            </span>\n          </Tag>\n        </Popover>\n      ) : null}\n    </>\n  );\n};\n","import {ButtonLink, MiddleTruncate, Tag} from '@dagster-io/ui-components';\nimport {useState} from 'react';\n\nimport {DagsterTag} from './RunTag';\nimport {InstigationSelector} from '../graphql/types';\nimport {TickDetailsDialog} from '../instigation/TickDetailsDialog';\n\ninterface Props {\n  instigationSelector: InstigationSelector;\n  instigationType: DagsterTag.SensorName | DagsterTag.ScheduleName;\n  tickId: string;\n}\n\nexport const TickTagForRun = ({instigationSelector, instigationType, tickId}: Props) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const icon = instigationType === DagsterTag.ScheduleName ? 'schedule' : 'sensors';\n  const {name} = instigationSelector;\n\n  return (\n    <>\n      <Tag icon={icon}>\n        <span>\n          Launched by{' '}\n          <ButtonLink onClick={() => setIsOpen(true)}>\n            <div style={{maxWidth: '140px'}}>\n              <MiddleTruncate text={name} />\n            </div>\n          </ButtonLink>\n        </span>\n      </Tag>\n      <TickDetailsDialog\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        instigationSelector={instigationSelector}\n        tickId={Number(tickId)}\n      />\n    </>\n  );\n};\n","import {Box, Icon, MiddleTruncate, Popover, Tag} from '@dagster-io/ui-components';\nimport {useMemo} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\nimport {AssetKey} from './types';\n\nconst COLLATOR = new Intl.Collator(navigator.language, {sensitivity: 'base'});\n\ninterface Props {\n  assetKeys: AssetKey[];\n  evaluationId: string;\n}\n\nexport const AutomaterializeTagWithEvaluation = ({assetKeys, evaluationId}: Props) => {\n  const sortedKeys = useMemo(() => {\n    return [...assetKeys].sort((a, b) => COLLATOR.compare(a.path.join('/'), b.path.join('/')));\n  }, [assetKeys]);\n\n  return (\n    <Popover\n      placement=\"bottom\"\n      content={\n        <div style={{width: '340px'}}>\n          <Box padding={{vertical: 8, horizontal: 12}} border=\"bottom\" style={{fontWeight: 600}}>\n            Auto-materialized\n          </Box>\n          <Box\n            flex={{direction: 'column', gap: 12}}\n            padding={{vertical: 12}}\n            style={{maxHeight: '220px', overflowY: 'auto'}}\n          >\n            {sortedKeys.map((assetKey) => {\n              const url = assetDetailsPathForKey(assetKey, {\n                view: 'automation',\n                evaluation: evaluationId,\n              });\n              return (\n                <Box\n                  key={url}\n                  padding={{vertical: 8, left: 12, right: 16}}\n                  flex={{\n                    direction: 'row',\n                    justifyContent: 'space-between',\n                    alignItems: 'center',\n                    gap: 8,\n                  }}\n                  style={{overflow: 'hidden'}}\n                >\n                  <Box\n                    flex={{direction: 'row', alignItems: 'center', gap: 8}}\n                    style={{overflow: 'hidden'}}\n                  >\n                    <Icon name=\"asset\" />\n                    <MiddleTruncate text={assetKey.path.join('/')} />\n                  </Box>\n                  <Link to={url} style={{whiteSpace: 'nowrap'}}>\n                    View evaluation\n                  </Link>\n                </Box>\n              );\n            })}\n          </Box>\n        </div>\n      }\n      interactionKind=\"hover\"\n    >\n      <Tag icon=\"auto_materialize_policy\">Auto-materialized</Tag>\n    </Popover>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, FontFamily, Heading, NonIdealState, PageHeader, Tag} from '@dagster-io/ui-components';\nimport {useLayoutEffect, useMemo} from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport {AssetCheckTagCollection, AssetKeyTagCollection} from './AssetTagCollections';\nimport {Run} from './Run';\nimport {RunAssetTags} from './RunAssetTags';\nimport {RUN_PAGE_FRAGMENT} from './RunFragments';\nimport {RunHeaderActions} from './RunHeaderActions';\nimport {RunRootTrace, useRunRootTrace} from './RunRootTrace';\nimport {RunStatusTag} from './RunStatusTag';\nimport {DagsterTag} from './RunTag';\nimport {RunTimingTags} from './RunTimingTags';\nimport {assetKeysForRun} from './RunUtils';\nimport {TickTagForRun} from './TickTagForRun';\nimport {RunRootQuery, RunRootQueryVariables} from './types/RunRoot.types';\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {AutomaterializeTagWithEvaluation} from '../assets/AutomaterializeTagWithEvaluation';\nimport {InstigationSelector} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useBlockTraceOnQueryResult} from '../performance/TraceContext';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {isThisThingAJob} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {useRepositoryForRunWithParentSnapshot} from '../workspace/useRepositoryForRun';\n\nexport const RunRoot = () => {\n  useTrackPageView();\n\n  const trace = useRunRootTrace();\n  const {runId} = useParams<{runId: string}>();\n  useDocumentTitle(runId ? `Run ${runId.slice(0, 8)}` : 'Run');\n\n  const queryResult = useQuery<RunRootQuery, RunRootQueryVariables>(RUN_ROOT_QUERY, {\n    variables: {runId},\n  });\n  const {data, loading} = queryResult;\n  useBlockTraceOnQueryResult(queryResult, 'RunRootQuery');\n\n  const run = data?.pipelineRunOrError.__typename === 'Run' ? data.pipelineRunOrError : null;\n  const snapshotID = run?.pipelineSnapshotId;\n\n  const repoMatch = useRepositoryForRunWithParentSnapshot(run);\n  const repoAddress = repoMatch?.match\n    ? buildRepoAddress(repoMatch.match.repository.name, repoMatch.match.repositoryLocation.name)\n    : null;\n\n  const isJob = useMemo(\n    () => !!(run && repoMatch && isThisThingAJob(repoMatch.match, run.pipelineName)),\n    [run, repoMatch],\n  );\n\n  const automaterializeTag = useMemo(\n    () => run?.tags.find((tag) => tag.key === DagsterTag.AssetEvaluationID) || null,\n    [run],\n  );\n\n  useLayoutEffect(() => {\n    if (!loading) {\n      trace.onRunLoaded();\n    }\n  }, [loading, trace]);\n\n  const tickDetails = useMemo(() => {\n    if (repoAddress) {\n      const tags = run?.tags || [];\n      const tickTag = tags.find((tag) => tag.key === DagsterTag.TickId);\n\n      if (tickTag) {\n        const scheduleOrSensor = tags.find(\n          (tag) => tag.key === DagsterTag.ScheduleName || tag.key === DagsterTag.SensorName,\n        );\n        if (scheduleOrSensor) {\n          const instigationSelector: InstigationSelector = {\n            name: scheduleOrSensor.value,\n            repositoryName: repoAddress.name,\n            repositoryLocationName: repoAddress.location,\n          };\n          return {\n            tickId: tickTag.value,\n            instigationType: scheduleOrSensor.key as\n              | DagsterTag.ScheduleName\n              | DagsterTag.SensorName,\n            instigationSelector,\n          };\n        }\n      }\n    }\n\n    return null;\n  }, [run, repoAddress]);\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        minWidth: 0,\n        width: '100%',\n        height: '100%',\n        overflow: 'hidden',\n      }}\n    >\n      <Box\n        flex={{direction: 'row', alignItems: 'flex-start'}}\n        style={{\n          position: 'relative',\n          zIndex: 1,\n        }}\n      >\n        <PageHeader\n          title={\n            <Heading style={{fontFamily: FontFamily.monospace, fontSize: '16px'}}>\n              {runId.slice(0, 8)}\n            </Heading>\n          }\n          tags={\n            run ? (\n              <Box flex={{direction: 'row', alignItems: 'flex-start', gap: 12, wrap: 'wrap'}}>\n                <RunStatusTag status={run.status} />\n                {!isHiddenAssetGroupJob(run.pipelineName) ? (\n                  <Tag icon=\"run\">\n                    Run of{' '}\n                    <PipelineReference\n                      pipelineName={run?.pipelineName}\n                      pipelineHrefContext={repoAddress || 'repo-unknown'}\n                      snapshotId={snapshotID}\n                      size=\"small\"\n                      isJob={isJob}\n                    />\n                  </Tag>\n                ) : null}\n                {tickDetails ? (\n                  <TickTagForRun\n                    instigationSelector={tickDetails.instigationSelector}\n                    instigationType={tickDetails.instigationType}\n                    tickId={tickDetails.tickId}\n                  />\n                ) : null}\n                {isHiddenAssetGroupJob(run.pipelineName) ? (\n                  <AssetKeyTagCollection useTags assetKeys={assetKeysForRun(run)} />\n                ) : (\n                  <RunAssetTags run={run} />\n                )}\n                <AssetCheckTagCollection useTags assetChecks={run.assetCheckSelection} />\n                <RunTimingTags run={run} loading={loading} />\n                {automaterializeTag && run.assetSelection?.length ? (\n                  <AutomaterializeTagWithEvaluation\n                    assetKeys={run.assetSelection}\n                    evaluationId={automaterializeTag.value}\n                  />\n                ) : null}\n              </Box>\n            ) : null\n          }\n          right={run ? <RunHeaderActions run={run} isJob={isJob} /> : null}\n        />\n      </Box>\n      <RunById data={data} runId={runId} trace={trace} />\n    </div>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default RunRoot;\n\nconst RunById = (props: {data: RunRootQuery | undefined; runId: string; trace: RunRootTrace}) => {\n  const {data, runId, trace} = props;\n\n  if (!data || !data.pipelineRunOrError) {\n    return <Run run={undefined} runId={runId} trace={trace} />;\n  }\n\n  if (data.pipelineRunOrError.__typename !== 'Run') {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"No run found\"\n          description=\"The run with this ID does not exist or has been cleaned up.\"\n        />\n      </Box>\n    );\n  }\n\n  return <Run run={data.pipelineRunOrError} runId={runId} trace={trace} />;\n};\n\nconst RUN_ROOT_QUERY = gql`\n  query RunRootQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        ...RunPageFragment\n      }\n    }\n  }\n\n  ${RUN_PAGE_FRAGMENT}\n`;\n"],"names":["useFavicon","useEffect","el","document","querySelector","previousHref","getAttribute","setAttribute","href","runStatusFavicon","status","RunStatus","FAILURE","SUCCESS","STARTING","STARTED","CANCELING","Run","memo","run","runId","trace","props","logsFilter","setLogsFilter","useQueryPersistedLogFilter","selectionQuery","setSelectionQuery","useQueryPersistedState","queryKey","defaults","selection","useDocumentTitle","isHiddenAssetGroupJob","pipelineName","slice","concat","onShowStateDetails","stepKey","logs","errorNode","find","node","__typename","showCustomAlert","body","jsx_runtime","jsx","PythonErrorInfo","error","onSetSelectionQuery","query","logQuery","token","value","logsDependency","useTraceDependency","RunContext","Provider","LogsProvider","jsxs","Fragment","OnLogsLoaded","dependency","RunMetadataProvider","RunWithData","metadata","onSetLogsFilter","param","React","onLogsLoaded","completeDependency","CompletionType","logTypeFromQuery","queryLogType","LogType","stdout","stderr","structured","setQueryLogType","logType","computeLogUrl","setComputeLogUrl","stepKeysJSON","JSON","stringify","Object","keys","steps","sort","stepKeys","parse","runtimeGraph","executionPlan","toGraphQueryItems","selectionStepKeys","filterByQuery","all","map","n","name","supportsCapturedLogs","useSupportsCapturedLogs","logCaptureInfo","computeLogFileKey","setComputeLogFileKey","useComputeLogFileKeyForSelection","defaultToFirstStep","logsFilterStepKeys","filter","v","reduce","accum","push","expandedPanel","setExpandedPanel","containerRef","current","size","getSize","isTopExpanded","isBottomExpanded","resetPanels","changeSize","SplitPanelContainer","ref","axis","identifier","firstInitialPercent","firstMinSize","first","QueuedState","ErrorBoundary","region","GanttChart","options","mode","GanttChartMode","WATERFALL_TIMED","toolbarActions","Box","flex","direction","alignItems","gap","Tooltip","content","Button","icon","Icon","onClick","RunActionButtons","graph","onClickStep","evt","newSelected","index","indexOf","filterForExactStep","shiftKey","includes","k","splice","length","matchingLogKey","matchingComputeLogKeyFromStepKey","logCaptureSteps","join","onSetSelection","focusedTime","NonIdealState","title","GanttChartLoadingState","secondMinSize","second","LogsContainer","LogsToolbar","onSetLogType","lt","onSetFilter","onSetComputeLogKey","counts","isSectionExpanded","toggleExpanded","CapturedOrExternalLogPanel","logKey","visibleIOType","onSetDownloadUrl","ComputeLogPanel","undefined","ioType","NoStepSelectionState","type","LogsScrollingTable","filterStepKeys","filterKey","styled","div","withConfig","grow","justifyContent","style","background","Colors","description","RunAssetTags","skip","queryResult","useQuery","RUN_ASSETS_QUERY","variables","id","data","loading","useBlockTraceOnQueryResult","pipelineRunOrError","AssetKeyTagCollection","useTags","assetKeys","assets","a","key","gql","RunHeaderActions","isJob","runConfigYaml","runMetricsEnabled","tags","some","t","DagsterTag","RunMetrics","visibleDialog","setVisibleDialog","useState","rootServerURI","useContext","AppContext","refetch","RunsQueryRefetchContext","RunMetricsDialog","InjectedComponentContext","copy","useCopyToClipboard","history","useHistory","freeSlots","useMutation","FREE_CONCURRENCY_SLOTS_MUTATION","copyConfig","showSharedToaster","intent","message","freeConcurrencySlots","resp","jobLink","workspacePipelineLinkForRun","repositoryName","repositoryOrigin","repositoryLocationName","Group","spacing","disabledReason","useDisabledButtonTooltipFix","disabled","label","AnchorButton","to","Popover","position","Menu","targetTagName","MenuItem","text","window","open","tagName","hasConcurrencyKeySlots","doneStatuses","has","hasDeletePermission","RunConfigDialog","isOpen","onClose","DeletionDialog","onComplete","workspacePipelinePath","repoName","repoLocation","path","onTerminateInstead","selectedRuns","canTerminate","hasTerminatePermission","TerminationDialog","useRunRootTrace","usePageLoadTrace","useMemo","logsLoaded","runsLoaded","onLoaded","endTrace","onRunLoaded","RunTimingTags","startTime","interactionKind","placement","padding","RunTimingDetails","Tag","TimestampDisplay","timestamp","timeFormat","showSeconds","showTimezone","updateTime","endTime","span","fontVariantNumeric","formatElapsedTimeWithoutMsec","Date","now","TickTagForRun","instigationSelector","instigationType","tickId","setIsOpen","ScheduleName","ButtonLink","maxWidth","MiddleTruncate","TickDetailsDialog","Number","COLLATOR","Intl","Collator","navigator","language","sensitivity","AutomaterializeTagWithEvaluation","evaluationId","sortedKeys","b","compare","width","vertical","horizontal","border","fontWeight","maxHeight","overflowY","url","assetDetailsPathForKey","assetKey","view","evaluation","left","right","overflow","Link","whiteSpace","RunRoot","useTrackPageView","useParams","RUN_ROOT_QUERY","snapshotID","pipelineSnapshotId","repoMatch","useRepositoryForRunWithParentSnapshot","repoAddress","match","buildRepoAddress","repository","repositoryLocation","isThisThingAJob","automaterializeTag","tag","AssetEvaluationID","useLayoutEffect","tickDetails","tickTag","TickId","scheduleOrSensor","SensorName","location","display","flexDirection","minWidth","height","zIndex","PageHeader","Heading","fontFamily","FontFamily","monospace","fontSize","wrap","RunStatusTag","PipelineReference","pipelineHrefContext","snapshotId","assetKeysForRun","AssetCheckTagCollection","assetChecks","assetCheckSelection","assetSelection","RunById","runs_RunRoot","RUN_PAGE_FRAGMENT"],"sourceRoot":""}