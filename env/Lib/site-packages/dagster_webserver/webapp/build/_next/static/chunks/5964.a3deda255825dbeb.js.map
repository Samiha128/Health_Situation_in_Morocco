{"version":3,"file":"static/chunks/5964.a3deda255825dbeb.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/overview/OverviewAssetsRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewPageAlerts.tsx","webpack://_N_E/../ui-core/src/overview/OverviewTabs.tsx","webpack://_N_E/../ui-core/src/overview/OverviewPageHeader.tsx","webpack://_N_E/../ui-core/src/overview/OverviewActivityRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewJobsRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewResourcesTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewResourcesRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSchedulesRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSensorsRoot.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AutomaterializationRoot.tsx","webpack://_N_E/../ui-core/src/instance/InstanceBackfillsRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewRoot.tsx"],"sourcesContent":["import {\n  Alert,\n  Box,\n  Caption,\n  Colors,\n  Icon,\n  MenuItem,\n  Select,\n  Spinner,\n  Tag,\n  TextInput,\n  useViewport,\n} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, RefreshState, useRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useAssetsBaseData} from '../asset-data/AssetBaseDataProvider';\nimport {StatusCase, buildAssetNodeStatusContent} from '../asset-graph/AssetNodeStatusContent';\nimport {displayNameForAssetKey} from '../asset-graph/Utils';\nimport {groupAssetsByStatus} from '../asset-graph/util';\nimport {partitionCountString} from '../assets/AssetNodePartitionCounts';\nimport {useAllAssets} from '../assets/AssetsCatalogTable';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {AssetCatalogTableQuery} from '../assets/types/AssetsCatalogTable.types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {usePageLoadTrace} from '../performance';\nimport {Container, HeaderCell, HeaderRow, Inner, Row, RowCell} from '../ui/VirtualizedTable';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ntype Props = {\n  Header: React.ComponentType<{refreshState: RefreshState}>;\n  TabButton: React.ComponentType<{selected: 'timeline' | 'assets'}>;\n};\nexport const OverviewAssetsRoot = ({Header, TabButton}: Props) => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Assets');\n\n  const {assets, query, error, loading} = useAllAssets();\n  const refreshState = useRefreshAtInterval<any>({\n    refresh: query,\n    intervalMs: FIFTEEN_SECONDS,\n    leading: true,\n  });\n\n  const groupedAssetsUnfiltered = React.useMemo(() => {\n    if (assets) {\n      return groupAssets(assets);\n    }\n    return [];\n  }, [assets]);\n\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'q',\n    decode: (qs) => (qs.searchQuery ? JSON.parse(qs.searchQuery) : ''),\n    encode: (searchQuery) => ({searchQuery: searchQuery ? JSON.stringify(searchQuery) : undefined}),\n  });\n\n  const groupedAssets = React.useMemo(() => {\n    if (searchValue === '') {\n      return groupedAssetsUnfiltered;\n    }\n    return groupedAssetsUnfiltered.filter((group) => {\n      return (\n        (group.groupName || UNGROUPED_ASSETS).toLowerCase().includes(searchValue.toLowerCase()) ||\n        group.repositoryName.toLowerCase().includes(searchValue.toLowerCase())\n      );\n    });\n  }, [groupedAssetsUnfiltered, searchValue]);\n\n  const orderedAssets = React.useMemo(\n    () => groupedAssets.flatMap((group) => group.assets.map((asset) => asset.key)) ?? [],\n    [groupedAssets],\n  );\n  const {liveDataByNode} = useAssetsBaseData(orderedAssets, 'OverviewAssetsRoot');\n  const trace = usePageLoadTrace('OverviewAssetsRoot');\n  const isFullyLoaded = Object.keys(liveDataByNode).length === orderedAssets.length;\n  React.useEffect(() => {\n    if (isFullyLoaded) {\n      trace.endTrace();\n    }\n  }, [isFullyLoaded, trace]);\n\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: groupedAssets.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 82,\n    overscan: 5,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  function content() {\n    if (loading) {\n      return (\n        <Box\n          flex={{alignItems: 'center', justifyContent: 'center', direction: 'column', grow: 1}}\n          style={{width: '100%'}}\n        >\n          <Spinner purpose=\"page\" />\n        </Box>\n      );\n    }\n    if (error) {\n      return (\n        <Box\n          flex={{alignItems: 'center', justifyContent: 'center', direction: 'column', grow: 1}}\n          style={{width: '100%'}}\n        >\n          <PythonErrorInfo error={error} />\n        </Box>\n      );\n    }\n\n    return (\n      <Box flex={{direction: 'column'}} style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <VirtualHeaderRow />\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const group = groupedAssets[index]!;\n              return <VirtualRow key={key} start={start} height={size} group={group} />;\n            })}\n          </Inner>\n        </Container>\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <div style={{position: 'sticky', top: 0, zIndex: 1}}>\n        <Header refreshState={refreshState} />\n        <Box\n          padding={{horizontal: 24, vertical: 16}}\n          flex={{alignItems: 'center', gap: 12, grow: 0}}\n        >\n          <TabButton selected=\"assets\" />\n          <TextInput\n            value={searchValue}\n            onChange={(e) => {\n              setSearchValue(e.target.value);\n            }}\n            placeholder=\"Filter asset groups…\"\n          />\n        </Box>\n        <Box padding={{horizontal: 24, vertical: 16}} border=\"top\">\n          <Alert\n            intent=\"info\"\n            title=\"This Assets tab will be removed in an upcoming release.\"\n            description={\n              <>\n                Use the <Link to=\"/asset-groups\">global asset lineage page</Link> to view grouped\n                asset status details.\n              </>\n            }\n          />\n        </Box>\n      </div>\n      {content()}\n    </>\n  );\n};\n\ntype Assets = Extract<\n  AssetCatalogTableQuery['assetsOrError'],\n  {__typename: 'AssetConnection'}\n>['nodes'];\n\nfunction groupAssets(assets: Assets) {\n  const groups: Record<\n    string,\n    {\n      groupName: string | null;\n      repositoryName: string;\n      assets: Assets;\n    }\n  > = {};\n\n  assets.forEach((asset) => {\n    if (!asset.definition) {\n      return;\n    }\n    const groupName = asset.definition.groupName;\n    const repositoryName = asset.definition.repository.name;\n    const key = `${groupName}||${repositoryName}`;\n    const target = groups[key] || {\n      groupName,\n      repositoryName,\n      assets: [] as Assets,\n    };\n    target.assets.push(asset);\n    groups[key] = target;\n  });\n  return Object.values(groups);\n}\n\nconst TEMPLATE_COLUMNS = '5fr 1fr 1fr 1fr 1fr';\n\nconst VirtualHeaderRow = () => (\n  <HeaderRow templateColumns={TEMPLATE_COLUMNS} sticky>\n    <HeaderCell>Group name</HeaderCell>\n    <HeaderCell>Missing</HeaderCell>\n    <HeaderCell>Failed/Overdue</HeaderCell>\n    <HeaderCell>In progress</HeaderCell>\n    <HeaderCell>Materialized</HeaderCell>\n  </HeaderRow>\n);\n\nconst UNGROUPED_ASSETS = 'Ungrouped Assets';\ntype RowProps = {\n  height: number;\n  start: number;\n  group: ReturnType<typeof groupAssets>[0];\n};\nfunction VirtualRow({height, start, group}: RowProps) {\n  const assetKeys = React.useMemo(\n    () => group.assets.map((asset) => ({path: asset.key.path})),\n    [group.assets],\n  );\n\n  const {liveDataByNode} = useAssetsBaseData(assetKeys);\n  const trace = usePageLoadTrace('OverviewAssetsRoot:GroupBatch');\n\n  const statuses = React.useMemo(() => {\n    return groupAssetsByStatus(group.assets, liveDataByNode);\n  }, [liveDataByNode, group.assets]);\n\n  const repo = group.assets.find((asset) => asset.definition?.repository)?.definition?.repository;\n  const repoAddress = buildRepoAddress(repo?.name || '', repo?.location.name || '');\n\n  const {containerProps, viewport} = useViewport();\n\n  const isBatchStillLoading = assetKeys.length !== Object.keys(liveDataByNode).length;\n  const zeroOrBlank = isBatchStillLoading ? '' : '0';\n\n  React.useEffect(() => {\n    if (!isBatchStillLoading) {\n      trace.endTrace();\n    }\n  }, [trace, isBatchStillLoading]);\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\">\n        <Cell>\n          <Box flex={{direction: 'row', justifyContent: 'space-between', grow: 1}}>\n            <Box flex={{direction: 'column', gap: 2, grow: 1}}>\n              <Box flex={{direction: 'row', gap: 8}}>\n                <Icon name=\"asset_group\" />\n                {group.groupName ? (\n                  <Link\n                    style={{fontWeight: 700}}\n                    to={workspacePathFromAddress(repoAddress, `/asset-groups/${group.groupName}`)}\n                  >\n                    {group.groupName}\n                  </Link>\n                ) : (\n                  UNGROUPED_ASSETS\n                )}\n              </Box>\n              <div {...containerProps}>\n                <RepositoryLinkWrapper maxWidth={viewport.width}>\n                  <RepositoryLink repoAddress={repoAddress} showRefresh={false} />\n                </RepositoryLinkWrapper>\n              </div>\n            </Box>\n            <Box flex={{direction: 'column', justifyContent: 'center'}}>\n              {isBatchStillLoading ? <Spinner purpose=\"body-text\" /> : null}\n            </Box>\n          </Box>\n        </Cell>\n        <Cell>\n          {statuses.missing.length ? (\n            <SelectOnHover\n              assets={statuses.missing}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_MISSING) {\n                  return status.numMissing || 0;\n                }\n                return 0;\n              }}\n              adjective=\"missing\"\n            >\n              <Tag intent=\"none\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      width: '12px',\n                      height: '12px',\n                      border: `2px solid ${Colors.borderDefault()}`,\n                      borderRadius: '50%',\n                    }}\n                  />\n                  {statuses.missing.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n        <Cell>\n          {statuses.failed.length ? (\n            <SelectOnHover\n              assets={statuses.failed}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_FAILED) {\n                  return status.numFailed || 0;\n                }\n                return 0;\n              }}\n              adjective=\"failed\"\n            >\n              <Tag intent=\"danger\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      width: 0,\n                      height: 0,\n                      borderLeft: '6px solid transparent',\n                      borderRight: '6px solid transparent',\n                      borderBottom: '10px solid red',\n                      display: 'inline-block',\n                    }}\n                  />\n                  {statuses.failed.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n        <Cell>\n          {statuses.inprogress.length ? (\n            <SelectOnHover\n              assets={statuses.inprogress}\n              getCount={({status}) => {\n                if (status.case === StatusCase.MATERIALIZING) {\n                  return status.numMaterializing || 0;\n                }\n                return 0;\n              }}\n              adjective=\"materializing\"\n            >\n              <Tag intent=\"primary\" icon=\"spinner\">\n                {statuses.inprogress.length}\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n        <Cell>\n          {statuses.successful.length ? (\n            <SelectOnHover\n              assets={statuses.successful}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_MATERIALIZED) {\n                  return status.numMaterialized || 0;\n                }\n                return 0;\n              }}\n              adjective=\"materialized\"\n            >\n              <Tag intent=\"success\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      backgroundColor: Colors.accentGreen(),\n                      width: '10px',\n                      height: '10px',\n                      borderRadius: '50%',\n                    }}\n                  />\n                  {statuses.successful.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n      </RowGrid>\n    </Row>\n  );\n}\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n  > * {\n    vertical-align: middle;\n  }\n`;\n\nconst Cell = ({children}: {children: React.ReactNode}) => {\n  return (\n    <RowCell style={{color: Colors.textDefault()}}>\n      <Box flex={{direction: 'row', alignItems: 'center', grow: 1}}>{children}</Box>\n    </RowCell>\n  );\n};\n\nconst RepositoryLinkWrapper = styled.div<{maxWidth?: number}>`\n  font-size: 12px;\n  pointer-events: none;\n  a {\n    color: ${Colors.textLight()};\n    pointer-events: none;\n    max-width: ${({maxWidth}) => (maxWidth ? 'unset' : `${maxWidth}px`)};\n  }\n`;\n\ntype AssetWithStatusType = {\n  asset: Assets[0];\n  status: ReturnType<typeof buildAssetNodeStatusContent>;\n};\nfunction SelectOnHover({\n  assets,\n  children,\n  getCount,\n  adjective,\n}: {\n  assets: AssetWithStatusType[];\n  children: React.ReactNode;\n  getCount: (asset: AssetWithStatusType) => number;\n  adjective: string;\n}) {\n  return (\n    <SelectWrapper>\n      <Select\n        items={assets}\n        itemPredicate={(query, item) =>\n          displayNameForAssetKey(item.asset.key)\n            .toLocaleLowerCase()\n            .includes(query.toLocaleLowerCase())\n        }\n        itemRenderer={(item) => {\n          const count = getCount(item);\n          return (\n            <LinkWithNoUnderline to={assetDetailsPathForKey(item.asset.key)} target=\"_blank\">\n              <MenuItem\n                key={displayNameForAssetKey(item.asset.key)}\n                text={\n                  <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n                    <div style={{paddingLeft: '4px'}}>\n                      <Icon name=\"asset\" />\n                    </div>\n                    <div\n                      style={{overflow: 'hidden', whiteSpace: 'nowrap', textOverflow: 'ellipsis'}}\n                    >\n                      {displayNameForAssetKey(item.asset.key)}\n                    </div>\n                    {count && count > 0 ? (\n                      <Caption style={{color: Colors.textLight()}}>\n                        {partitionCountString(count)} {adjective}\n                      </Caption>\n                    ) : null}\n                  </Box>\n                }\n              />\n            </LinkWithNoUnderline>\n          );\n        }}\n        onItemSelect={() => {}}\n      >\n        {children}\n      </Select>\n    </SelectWrapper>\n  );\n}\n\nconst SelectWrapper = styled.div`\n  cursor: pointer;\n  &:hover {\n    font-weight: 600;\n  }\n`;\n\nconst LinkWithNoUnderline = styled(Link)`\n  &:hover {\n    text-decoration: none;\n  }\n`;\n","import {componentStub} from '../app/InjectedComponentContext';\n\nexport const OverviewPageAlerts = componentStub('OverviewPageAlerts');\n","import {QueryResult} from '@apollo/client';\nimport {Box, Colors, Spinner, Tabs} from '@dagster-io/ui-components';\nimport {useContext} from 'react';\n\nimport {useFeatureFlags} from '../app/Flags';\nimport {QueryRefreshCountdown, RefreshState} from '../app/QueryRefresh';\nimport {AssetFeatureContext} from '../assets/AssetFeatureContext';\nimport {useAutoMaterializeSensorFlag} from '../assets/AutoMaterializeSensorFlag';\nimport {useAutomaterializeDaemonStatus} from '../assets/useAutomaterializeDaemonStatus';\nimport {TabLink} from '../ui/TabLink';\n\ninterface Props<TData> {\n  refreshState?: RefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const OverviewTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  const {flagSettingsPage} = useFeatureFlags();\n\n  const automaterialize = useAutomaterializeDaemonStatus();\n  const automaterializeSensorsFlagState = useAutoMaterializeSensorFlag();\n  const {enableAssetHealthOverviewPreview} = useContext(AssetFeatureContext);\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink id=\"activity\" title=\"Timeline\" to=\"/overview/activity\" />\n        {enableAssetHealthOverviewPreview && (\n          <TabLink id=\"asset-health\" title=\"Asset health\" to=\"/overview/asset-health\" />\n        )}\n        {/* These are flagged individually because the links must be children of `Tabs`: */}\n        {flagSettingsPage ? null : <TabLink id=\"jobs\" title=\"Jobs\" to=\"/overview/jobs\" />}\n        {flagSettingsPage ? null : (\n          <TabLink id=\"schedules\" title=\"Schedules\" to=\"/overview/schedules\" />\n        )}\n        {flagSettingsPage ? null : <TabLink id=\"sensors\" title=\"Sensors\" to=\"/overview/sensors\" />}\n        {!flagSettingsPage && automaterializeSensorsFlagState === 'has-global-amp' ? (\n          <TabLink\n            id=\"amp\"\n            title={\n              <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n                <div>Auto-materialize</div>\n                {automaterialize.loading ? (\n                  <Spinner purpose=\"body-text\" />\n                ) : (\n                  <div\n                    style={{\n                      width: '10px',\n                      height: '10px',\n                      borderRadius: '50%',\n                      backgroundColor:\n                        automaterialize.paused === false\n                          ? Colors.accentBlue()\n                          : Colors.accentGray(),\n                    }}\n                  />\n                )}\n              </Box>\n            }\n            to=\"/overview/automation\"\n          />\n        ) : null}\n        <TabLink id=\"resources\" title=\"Resources\" to=\"/overview/resources\" />\n        {flagSettingsPage ? null : (\n          <TabLink id=\"backfills\" title=\"Backfills\" to=\"/overview/backfills\" />\n        )}\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {Box, Heading, PageHeader} from '@dagster-io/ui-components';\nimport React from 'react';\n\nimport {OverviewPageAlerts} from './OverviewPageAlerts';\nimport {OverviewTabs} from './OverviewTabs';\n\nexport const OverviewPageHeader = ({\n  tab,\n  queryData,\n  refreshState,\n  ...rest\n}: React.ComponentProps<typeof OverviewTabs> &\n  Omit<React.ComponentProps<typeof PageHeader>, 'title'>) => {\n  return (\n    <PageHeader\n      title={<Heading>Overview</Heading>}\n      tabs={\n        <Box flex={{direction: 'column', gap: 8}}>\n          <OverviewTabs tab={tab} queryData={queryData} refreshState={refreshState} />\n          <OverviewPageAlerts />\n        </Box>\n      }\n      {...rest}\n    />\n  );\n};\n","import {Box, JoinedButtons} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Redirect, Switch} from 'react-router-dom';\n\nimport {OverviewAssetsRoot} from './OverviewAssetsRoot';\nimport {OverviewPageHeader} from './OverviewPageHeader';\nimport {OverviewTabs} from './OverviewTabs';\nimport {OverviewTimelineRoot} from './OverviewTimelineRoot';\nimport {Route} from '../app/Route';\nimport {AssetFeatureContext} from '../assets/AssetFeatureContext';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {ActivatableButton} from '../runs/RunListTabs';\n\nexport const OverviewActivityRoot = () => {\n  useDocumentTitle('Overview | Activity');\n\n  const header = React.useCallback(\n    ({refreshState}: {refreshState: React.ComponentProps<typeof OverviewTabs>['refreshState']}) => (\n      <OverviewPageHeader tab=\"activity\" refreshState={refreshState} />\n    ),\n    [],\n  );\n\n  const [_defaultTab, setDefaultTab] = useStateWithStorage<'timeline' | 'assets'>(\n    'overview-activity-tab',\n    (json) => (['timeline', 'assets'].includes(json) ? json : 'timeline'),\n  );\n\n  const {enableAssetHealthOverviewPreview} = React.useContext(AssetFeatureContext);\n  const defaultTab = enableAssetHealthOverviewPreview ? 'timeline' : _defaultTab;\n\n  const tabButton = React.useCallback(\n    ({selected}: {selected: 'timeline' | 'assets'}) => {\n      if (enableAssetHealthOverviewPreview) {\n        return null;\n      }\n      if (defaultTab !== selected) {\n        setDefaultTab(selected);\n      }\n      return (\n        <JoinedButtons>\n          <ActivatableButton $active={selected === 'timeline'} to=\"/overview/activity/timeline\">\n            Timeline\n          </ActivatableButton>\n          <ActivatableButton $active={selected === 'assets'} to=\"/overview/activity/assets\">\n            Assets\n          </ActivatableButton>\n        </JoinedButtons>\n      );\n    },\n    [defaultTab, setDefaultTab, enableAssetHealthOverviewPreview],\n  );\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <Switch>\n        {!enableAssetHealthOverviewPreview && (\n          <Route path=\"/overview/activity/assets\">\n            <OverviewAssetsRoot Header={header} TabButton={tabButton} />\n          </Route>\n        )}\n        <Route path=\"/overview/activity/timeline\">\n          <OverviewTimelineRoot Header={header} TabButton={tabButton} />\n        </Route>\n        <Route\n          path=\"*\"\n          isNestingRoute\n          render={React.useCallback(\n            () =>\n              defaultTab === 'timeline' ? (\n                <Redirect to=\"/overview/activity/timeline\" />\n              ) : (\n                <Redirect to=\"/overview/activity/assets\" />\n              ),\n            [defaultTab],\n          )}\n        />\n      </Switch>\n    </Box>\n  );\n};\n","import {Box, Heading, PageHeader} from '@dagster-io/ui-components';\n\nimport {OverviewTabs} from './OverviewTabs';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {JobsPageContent} from '../jobs/JobsPageContent';\n\nexport const OverviewJobsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Jobs');\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader title={<Heading>Overview</Heading>} tabs={<OverviewTabs tab=\"jobs\" />} />\n      <JobsPageContent />\n    </Box>\n  );\n};\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport {useMemo, useRef} from 'react';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {\n  VirtualizedResourceHeader,\n  VirtualizedResourceRow,\n} from '../resources/VirtualizedResourceRow';\nimport {ResourceEntryFragment} from '../resources/types/WorkspaceResourcesRoot.types';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  resources: ResourceEntryFragment[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ninterface Resource extends ResourceEntryFragment {\n  type: 'resource';\n  repoAddress: RepoAddress;\n}\n\ntype RowType = {type: 'header'; repoAddress: RepoAddress; resourceCount: number} | Resource;\n\nexport const OverviewResourcesTable = ({repos}: Props) => {\n  const parentRef = useRef<HTMLDivElement | null>(null);\n  const allKeys = useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, resources}) => {\n      flat.push({type: 'header', repoAddress, resourceCount: resources.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        resources.forEach((resource) => {\n          flat.push({type: 'resource', repoAddress, ...resource});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <div style={{overflow: 'hidden'}}>\n      <Container ref={parentRef}>\n        <VirtualizedResourceHeader />\n        <Inner $totalHeight={totalHeight}>\n          {items.map(({index, key, size, start}) => {\n            const row: RowType = flattened[index]!;\n            const type = row!.type;\n            return type === 'header' ? (\n              <RepoRow\n                repoAddress={row.repoAddress}\n                key={key}\n                height={size}\n                start={start}\n                onToggle={onToggle}\n                onToggleAll={onToggleAll}\n                expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                rightElement={\n                  <Tooltip\n                    content={\n                      row.resourceCount === 1 ? '1 resource' : `${row.resourceCount} resources`\n                    }\n                    placement=\"top\"\n                  >\n                    <Tag>{row.resourceCount}</Tag>\n                  </Tooltip>\n                }\n              />\n            ) : (\n              <VirtualizedResourceRow key={key} height={size} start={start} {...row} />\n            );\n          })}\n        </Inner>\n      </Container>\n    </div>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Spinner, TextInput} from '@dagster-io/ui-components';\nimport {useContext, useMemo} from 'react';\n\nimport {OverviewPageHeader} from './OverviewPageHeader';\nimport {OverviewResourcesTable} from './OverviewResourcesTable';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {\n  OverviewResourcesQuery,\n  OverviewResourcesQueryVariables,\n} from './types/OverviewResourcesRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {useBlockTraceOnQueryResult} from '../performance/TraceContext';\nimport {RESOURCE_ENTRY_FRAGMENT} from '../resources/WorkspaceResourcesRoot';\nimport {ResourceEntryFragment} from '../resources/types/WorkspaceResourcesRoot.types';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {WorkspaceLocationNodeFragment} from '../workspace/types/WorkspaceQueries.types';\n\nexport const OverviewResourcesRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Resources');\n\n  const {\n    allRepos,\n    visibleRepos,\n    loading: workspaceLoading,\n    data: cachedData,\n  } = useContext(WorkspaceContext);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewResourcesQuery, OverviewResourcesQueryVariables>(\n    OVERVIEW_RESOURCES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading: queryLoading} = queryResultOverview;\n  useBlockTraceOnQueryResult(queryResultOverview, 'OverviewResourcesQuery');\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    const cachedEntries = Object.values(cachedData).filter(\n      (location): location is Extract<typeof location, {__typename: 'WorkspaceLocationEntry'}> =>\n        location.__typename === 'WorkspaceLocationEntry',\n    );\n    const workspaceOrError = data?.workspaceOrError;\n    const entries =\n      workspaceOrError?.__typename === 'Workspace'\n        ? workspaceOrError.locationEntries\n        : cachedEntries;\n    return buildBuckets(entries).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [cachedData, data, visibleRepos]);\n\n  const loading = !data && queryLoading && workspaceLoading;\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, resources}) => ({\n        repoAddress,\n        resources: resources.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({resources}) => resources.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading resources…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching resources\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No resources matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No resources matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No resources\"\n            description={\n              anyReposHidden\n                ? 'No resources were found in the selected code locations'\n                : 'No resources were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewResourcesTable repos={filteredBySearch} />;\n  };\n\n  const showSearchSpinner = queryLoading && !data;\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <OverviewPageHeader tab=\"resources\" refreshState={refreshState} />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 1 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          rightElement={\n            showSearchSpinner ? (\n              <SearchInputSpinner tooltipContent=\"Loading resources…\" />\n            ) : undefined\n          }\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by resource name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  resources: ResourceEntryFragment[];\n};\n\nconst buildBuckets = (\n  locationEntries:\n    | Extract<\n        OverviewResourcesQuery['workspaceOrError'],\n        {__typename: 'Workspace'}\n      >['locationEntries']\n    | Extract<WorkspaceLocationNodeFragment, {__typename: 'WorkspaceLocationEntry'}>[],\n): RepoBucket[] => {\n  const entries = locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, allTopLevelResourceDetails} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n\n      if (allTopLevelResourceDetails.length > 0) {\n        buckets.push({\n          repoAddress,\n          resources: allTopLevelResourceDetails,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_RESOURCES_QUERY = gql`\n  query OverviewResourcesQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                allTopLevelResourceDetails {\n                  id\n                  ...ResourceEntryFragment\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${RESOURCE_ENTRY_FRAGMENT}\n`;\n","import {Box} from '@dagster-io/ui-components';\n\nimport {OverviewPageHeader} from './OverviewPageHeader';\nimport {OverviewSchedules} from './OverviewSchedules';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\n\nexport const OverviewSchedulesRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Schedules');\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <OverviewPageHeader tab=\"schedules\" />\n      <OverviewSchedules />\n    </Box>\n  );\n};\n","import {Box} from '@dagster-io/ui-components';\n\nimport {OverviewPageHeader} from './OverviewPageHeader';\nimport {OverviewSensors} from './OverviewSensors';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\n\nexport const OverviewSensorsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Sensors');\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <OverviewPageHeader tab=\"sensors\" />\n      <OverviewSensors />\n    </Box>\n  );\n};\n","import {Page} from '@dagster-io/ui-components';\nimport {Redirect} from 'react-router-dom';\n\nimport {GlobalAutomaterializationContent} from './GlobalAutomaterializationContent';\nimport {assertUnreachable} from '../../app/Util';\nimport {useTrackPageView} from '../../app/analytics';\nimport {useDocumentTitle} from '../../hooks/useDocumentTitle';\nimport {OverviewPageHeader} from '../../overview/OverviewPageHeader';\nimport {useAutoMaterializeSensorFlag} from '../AutoMaterializeSensorFlag';\n\n// Determine whether the user is flagged to see automaterialize policies as\n// sensors. If so, redirect to the Sensors overview.\nexport const AutomaterializationRoot = () => {\n  const automaterializeSensorsFlagState = useAutoMaterializeSensorFlag();\n  switch (automaterializeSensorsFlagState) {\n    case 'unknown':\n      return <div />; // Waiting for result\n    case 'has-global-amp':\n      return <GlobalAutomaterializationRoot />;\n    case 'has-sensor-amp':\n      return <Redirect to=\"/overview/sensors\" />;\n    default:\n      assertUnreachable(automaterializeSensorsFlagState);\n  }\n};\n\nconst GlobalAutomaterializationRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Auto-materialize');\n  return (\n    <Page>\n      <OverviewPageHeader tab=\"amp\" />\n      <GlobalAutomaterializationContent />\n    </Page>\n  );\n};\n","import {Page} from '@dagster-io/ui-components';\n\nimport {InstanceBackfills} from './InstanceBackfills';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {OverviewPageHeader} from '../overview/OverviewPageHeader';\n\nexport const InstanceBackfillsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Backfills');\n\n  return (\n    <Page>\n      <OverviewPageHeader tab=\"backfills\" />\n      <InstanceBackfills />\n    </Page>\n  );\n};\n","import {Redirect, Switch} from 'react-router-dom';\n\nimport {OverviewActivityRoot} from './OverviewActivityRoot';\nimport {OverviewJobsRoot} from './OverviewJobsRoot';\nimport {OverviewResourcesRoot} from './OverviewResourcesRoot';\nimport {OverviewSchedulesRoot} from './OverviewSchedulesRoot';\nimport {OverviewSensorsRoot} from './OverviewSensorsRoot';\nimport {useFeatureFlags} from '../app/Flags';\nimport {Route} from '../app/Route';\nimport {AutomaterializationRoot} from '../assets/auto-materialization/AutomaterializationRoot';\nimport {InstanceBackfillsRoot} from '../instance/InstanceBackfillsRoot';\nimport {BackfillPage} from '../instance/backfill/BackfillPage';\n\nexport const OverviewRoot = () => {\n  const {flagSettingsPage} = useFeatureFlags();\n  return (\n    <Switch>\n      <Route path=\"/overview/activity\" isNestingRoute>\n        <OverviewActivityRoot />\n      </Route>\n      <Route\n        path=\"/overview/jobs\"\n        render={() => (flagSettingsPage ? <Redirect to=\"/jobs\" /> : <OverviewJobsRoot />)}\n      />\n      <Route\n        path=\"/overview/schedules\"\n        render={() =>\n          flagSettingsPage ? <Redirect to=\"/automation/schedules\" /> : <OverviewSchedulesRoot />\n        }\n      />\n      <Route\n        path=\"/overview/sensors\"\n        render={() =>\n          flagSettingsPage ? <Redirect to=\"/automation/sensors\" /> : <OverviewSensorsRoot />\n        }\n      />\n      <Route\n        path=\"/overview/automation\"\n        render={() =>\n          flagSettingsPage ? <Redirect to=\"/automation\" /> : <AutomaterializationRoot />\n        }\n      />\n      <Route\n        path=\"/overview/backfills/:backfillId\"\n        render={({match}) =>\n          flagSettingsPage ? (\n            <Redirect to={`/automation/backfills/${match.params.backfillId}`} />\n          ) : (\n            <BackfillPage />\n          )\n        }\n      />\n      <Route\n        path=\"/overview/backfills\"\n        exact\n        render={() =>\n          flagSettingsPage ? <Redirect to=\"/automation/backfills\" /> : <InstanceBackfillsRoot />\n        }\n      />\n      <Route path=\"/overview/resources\">\n        <OverviewResourcesRoot />\n      </Route>\n      <Route path=\"*\" isNestingRoute render={() => <Redirect to=\"/overview/activity\" />} />\n    </Switch>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default OverviewRoot;\n"],"names":["OverviewAssetsRoot","Header","TabButton","param","useTrackPageView","useDocumentTitle","assets","query","error","loading","useAllAssets","refreshState","useRefreshAtInterval","refresh","intervalMs","FIFTEEN_SECONDS","leading","groupedAssetsUnfiltered","React","groupAssets","groups","forEach","asset","definition","groupName","repositoryName","repository","name","key","concat","target","push","Object","values","searchValue","setSearchValue","useQueryPersistedState","queryKey","decode","qs","searchQuery","JSON","parse","encode","stringify","undefined","groupedAssets","filter","group","UNGROUPED_ASSETS","toLowerCase","includes","orderedAssets","flatMap","map","liveDataByNode","useAssetsBaseData","trace","usePageLoadTrace","isFullyLoaded","keys","length","endTrace","parentRef","rowVirtualizer","useVirtualizer","count","getScrollElement","current","estimateSize","overscan","totalHeight","getTotalSize","items","getVirtualItems","jsx_runtime","jsxs","Fragment","div","style","position","top","zIndex","jsx","Box","padding","horizontal","vertical","flex","alignItems","gap","grow","selected","TextInput","value","onChange","e","placeholder","border","Alert","intent","title","description","Link","to","justifyContent","direction","width","Spinner","purpose","PythonErrorInfo","overflow","Container","ref","VirtualHeaderRow","Inner","$totalHeight","index","size","start","VirtualRow","height","TEMPLATE_COLUMNS","HeaderRow","templateColumns","sticky","HeaderCell","assetKeys","path","statuses","groupAssetsByStatus","repo","find","repoAddress","buildRepoAddress","location","containerProps","viewport","useViewport","isBatchStillLoading","zeroOrBlank","Row","$height","$start","RowGrid","Cell","Icon","fontWeight","workspacePathFromAddress","RepositoryLinkWrapper","maxWidth","RepositoryLink","showRefresh","missing","SelectOnHover","getCount","status","case","StatusCase","PARTITIONS_MISSING","numMissing","adjective","Tag","Colors","borderRadius","failed","PARTITIONS_FAILED","numFailed","borderLeft","borderRight","borderBottom","display","inprogress","MATERIALIZING","numMaterializing","icon","successful","PARTITIONS_MATERIALIZED","numMaterialized","backgroundColor","styled","children","RowCell","color","withConfig","SelectWrapper","Select","itemPredicate","item","displayNameForAssetKey","toLocaleLowerCase","itemRenderer","LinkWithNoUnderline","assetDetailsPathForKey","MenuItem","text","paddingLeft","whiteSpace","textOverflow","Caption","partitionCountString","onItemSelect","OverviewPageAlerts","componentStub","OverviewTabs","tab","props","flagSettingsPage","useFeatureFlags","automaterialize","useAutomaterializeDaemonStatus","automaterializeSensorsFlagState","useAutoMaterializeSensorFlag","enableAssetHealthOverviewPreview","useContext","AssetFeatureContext","Tabs","selectedTabId","TabLink","id","paused","bottom","QueryRefreshCountdown","OverviewPageHeader","queryData","rest","PageHeader","Heading","tabs","OverviewActivityRoot","header","_defaultTab","setDefaultTab","useStateWithStorage","json","defaultTab","tabButton","JoinedButtons","ActivatableButton","$active","Switch","Route","OverviewTimelineRoot","isNestingRoute","render","Redirect","OverviewJobsRoot","JobsPageContent","OverviewResourcesTable","repos","useRef","allKeys","useMemo","repoAddressAsHumanString","expandedKeys","onToggle","onToggleAll","useRepoExpansionState","OVERVIEW_COLLAPSED_KEY","flattened","flat","resources","type","resourceCount","repoKey","resource","duplicateRepoNames","findDuplicateRepoNames","row","ii","VirtualizedResourceHeader","RepoRow","expanded","showLocation","has","rightElement","Tooltip","content","placement","VirtualizedResourceRow","OverviewResourcesRoot","allRepos","visibleRepos","workspaceLoading","data","cachedData","WorkspaceContext","defaults","search","repoCount","queryResultOverview","useQuery","OVERVIEW_RESOURCES_QUERY","fetchPolicy","notifyOnNetworkStatusChange","queryLoading","useBlockTraceOnQueryResult","useQueryRefreshAtInterval","repoBuckets","visibleKeys","visibleRepoKeys","cachedEntries","__typename","workspaceOrError","buildBuckets","locationEntries","sanitizedSearch","trim","anySearch","filteredBySearch","searchToLower","showSearchSpinner","RepoFilterButton","SearchInputSpinner","tooltipContent","paddingTop","anyReposHidden","NonIdealState","strong","entries","entry","locationOrLoadError","buckets","repositories","allTopLevelResourceDetails","sortRepoBuckets","gql","PYTHON_ERROR_FRAGMENT","RESOURCE_ENTRY_FRAGMENT","OverviewSchedulesRoot","OverviewSchedules","OverviewSensorsRoot","OverviewSensors","AutomaterializationRoot","GlobalAutomaterializationRoot","assertUnreachable","Page","GlobalAutomaterializationContent","InstanceBackfillsRoot","InstanceBackfills","OverviewRoot","match","params","backfillId","BackfillPage","exact","overview_OverviewRoot"],"sourceRoot":""}