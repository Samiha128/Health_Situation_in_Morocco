{"version":3,"file":"static/chunks/4909.55bdec22e5b722d9.js","mappings":"sFAsCA,IAAAA,EAAAC,EAtC+B,OAsC/B,SAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,EACAF,CAAA,CAAAE,EAAA,KAAAC,IAAA,CAAAF,EACA,EAAC,WAAe,eAEhBG,CAAAA,EAAAC,OAAA,CAAAP,+QClCO,IAAMQ,EAAkB,SAKpBC,EAJT,IAAMA,EAAcC,CAAAA,EAAAA,EAAAA,CAAAA,EAClBC,GAGF,MADAC,CAAAA,EAAAA,EAAAA,EAAAA,EAA2BH,EAAa,8BACjC,CAAC,SAACA,CAAAA,EAAAA,EAAYI,IAAI,GAAhBJ,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAkBK,QAAQ,CAACC,OAAO,CAC7C,EAEMJ,EAA2BK,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA","sources":["webpack://_N_E/../../node_modules/lodash/partition.js","webpack://_N_E/../ui-core/src/instance/useCanSeeConfig.tsx"],"sourcesContent":["var createAggregator = require('./_createAggregator');\n\n/**\n * Creates an array of elements split into two groups, the first of which\n * contains elements `predicate` returns truthy for, the second of which\n * contains elements `predicate` returns falsey for. The predicate is\n * invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the array of grouped elements.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': false },\n *   { 'user': 'fred',    'age': 40, 'active': true },\n *   { 'user': 'pebbles', 'age': 1,  'active': false }\n * ];\n *\n * _.partition(users, function(o) { return o.active; });\n * // => objects for [['fred'], ['barney', 'pebbles']]\n *\n * // The `_.matches` iteratee shorthand.\n * _.partition(users, { 'age': 1, 'active': false });\n * // => objects for [['pebbles'], ['barney', 'fred']]\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.partition(users, ['active', false]);\n * // => objects for [['barney', 'pebbles'], ['fred']]\n *\n * // The `_.property` iteratee shorthand.\n * _.partition(users, 'active');\n * // => objects for [['fred'], ['barney', 'pebbles']]\n */\nvar partition = createAggregator(function(result, value, key) {\n  result[key ? 0 : 1].push(value);\n}, function() { return [[], []]; });\n\nmodule.exports = partition;\n","import {gql, useQuery} from '@apollo/client';\n\nimport {\n  InstanceConfigHasInfoQuery,\n  InstanceConfigHasInfoQueryVariables,\n} from './types/useCanSeeConfig.types';\nimport {useBlockTraceOnQueryResult} from '../performance/TraceContext';\n\nexport const useCanSeeConfig = () => {\n  const queryResult = useQuery<InstanceConfigHasInfoQuery, InstanceConfigHasInfoQueryVariables>(\n    INSTANCE_CONFIG_HAS_INFO,\n  );\n  useBlockTraceOnQueryResult(queryResult, 'InstanceConfigHasInfoQuery');\n  return !!queryResult.data?.instance.hasInfo;\n};\n\nconst INSTANCE_CONFIG_HAS_INFO = gql`\n  query InstanceConfigHasInfo {\n    instance {\n      id\n      hasInfo\n    }\n  }\n`;\n"],"names":["partition","createAggregator","result","value","key","push","module","exports","useCanSeeConfig","queryResult","useQuery","INSTANCE_CONFIG_HAS_INFO","useBlockTraceOnQueryResult","data","instance","hasInfo","gql"],"sourceRoot":""}